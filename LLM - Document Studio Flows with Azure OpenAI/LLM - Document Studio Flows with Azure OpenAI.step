{"type":"code","name":"LLM - Document Studio Flows with Azure OpenAI.step","displayName":"LLM - Document Studio Flows with Azure OpenAI.step","description":"","templates":{"SAS":"\n/* Run the Python code within PROC PYTHON */  \nproc python;  \n   submit;  \n\n# The following contains the Python Code to be written inside a PROC PYTHON.\n\nimport os\nfrom dotenv import load_dotenv\nimport requests\n\n# Get variables from SAS\ninput_file = SAS.symget('input_file')\nenv_file_folder = SAS.symget('env_filefolderSelector')\nmessages = SAS.symget('msgfile_fileSelector')\noutput_file = SAS.symget('output_step_fileSelector')\n\n# Override for testing\n#env_file_folder = 'sasserver:/azuredm/code'\n#input_file = 'sasserver:/azuredm/code/flows/Car_Make_with_SubFlows.flw'\n#output_file = 'sasserver:/azuredm/code/Car_Make_with_SubFlows_.txt'\n#messages = 'sasserver:/azuredm/code/system_message.txt'\n\n# Extract from SAS variables to resolve to Python paths\nenv_file_folder = env_file_folder.replace('sasserver:', '')\ninput_file = input_file.replace('sasserver:', '')\noutput_file = output_file.replace('sasserver:', '')\nmessages = messages.replace('sasserver:', '')\nprint(\"env_file_folder:\", env_file_folder)\nprint(\"input_file:\", input_file)\nprint(\"output_file:\", output_file)\nprint(\"messages:\", messages)\n\n# Folder where .env file is stored\nos.chdir(env_file_folder)\n  \ndef process_file(input_file, output_file):  \n    try:  \n        # Read the input file  \n        with open(input_file, 'r', encoding='utf-8') as f:  \n            content = f.read()  \n  \n        # Print the length of the string to verify  \n        print(f\"The length of the SAS Studio flow as a string is: {len(content)}\")  \n  \n        # Read LLM system message  \n        with open(messages, 'r', encoding=\"utf8\") as file:  \n            system_message = file.read()  \n  \n        # Get configuration settings  \n        load_dotenv()  \n        azure_oai_endpoint = os.getenv(\"AZURE_OAI_ENDPOINT\")  \n        azure_oai_key = os.getenv(\"AZURE_OAI_KEY\")  \n        azure_oai_deployment = os.getenv(\"AZURE_OAI_DEPLOYMENT\")  \n        azure_oai_model = azure_oai_deployment  \n        api_version = '2025-01-01-preview'  # this might change in the future  \n  \n        # Request Header  \n        headers = {  \n            \"Content-Type\": \"application/json\",  \n            \"api-key\": azure_oai_key,  \n        }  \n  \n        # Payload for the request  \n        payload = {  \n            \"messages\": [  \n                {  \n                    \"role\": \"system\",  \n                    \"content\": [  \n                        {  \n                            \"type\": \"text\",  \n                            \"text\": f\"{system_message}\\n\"  \n                        }  \n                    ]  \n                },  \n                {  \n                    \"role\": \"user\",  \n                    \"content\": [  \n                        {  \n                            \"type\": \"text\",  \n                            \"text\": f\"Document the following SAS Studio flow. FLW file content: --- {content} ---\"  \n                        }  \n                    ]  \n                },  \n            ],  \n            \"temperature\": 0.5,  \n            \"top_p\": 0.9,  \n            \"max_tokens\": 2500  \n        }  \n  \n        ENDPOINT = f\"{azure_oai_endpoint}openai/deployments/{azure_oai_model}/chat/completions?api-version={api_version}\"  \n  \n        # Send the request  \n        try:  \n            response = requests.post(ENDPOINT, headers=headers, json=payload)  \n            response.raise_for_status()  # Will raise an HTTPError if the HTTP request returned an unsuccessful status code  \n        except requests.RequestException as e:  \n            raise SystemExit(f\"Failed to make the request. Error: {e}\")  \n  \n        # Handle the response as needed (e.g., print or process)  \n        response_data = response.json()  \n  \n        # Extract the text content  \n        # This will vary based on the APIs JSON structure  \n        text_content = response_data['choices'][0]['message']['content']  \n        print(\"\\n Response: \\n\" + text_content + \"\\n\")  \n  \n        # Write the response to a file  \n        with open(output_file, mode=\"w\", encoding=\"utf8\") as results_file:  \n            results_file.write(text_content)  \n  \n        print(f\"\\nResponse written to {output_file}\\n\")  \n\n    except Exception as e:  \n        error_message = f\"Error: {e}\"  \n        print(error_message)  \n        # Pass the error message back to SAS log  \n        # SAS.submit(f'data _null_; put \"{error_message}\"; run;')\n\n# Run the processing function  \ntry:  \n    process_file(input_file, output_file)  \nexcept Exception as e:  \n    error_message = f\"Error: {e}\"  \n    print(error_message)  \n    # Pass the error message back to SAS log  \n    SAS.submit(f'data _null_; put \"{error_message}\"; run;')  \n\nendsubmit;\nrun;"},"properties":{},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"pageOptions\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Options\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Inputs:\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"input_file\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Select the flow to be documented (.flw file):\",\n\t\t\t\t\t\"pathtype\": \"file\",\n\t\t\t\t\t\"placeholder\": \"Car_Make_with_SubFlows.flw\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"env_filefolderSelector\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Folder where the .env file is stored:\",\n\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\"placeholder\": \"/azuredm/code\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"msgfile_fileSelector\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"File where the LLM system message is stored:\",\n\t\t\t\t\t\"pathtype\": \"file\",\n\t\t\t\t\t\"placeholder\": \"system_message.txt\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Output: choose the output file where the flow documentation is written (.txt file).\",\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"indent\": 0\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"output_step_fileSelector\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Write the output to (.txt file):\",\n\t\t\t\t\t\"pathtype\": \"file\",\n\t\t\t\t\t\"placeholder\": \"Car_Make_with_SubFlows.txt\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"pageAbout\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"textAbout\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"LLM - Document Studio Flows with Azure OpenAI\\n==================================================\\n\\nThe \\\"LLM - Document Studio Flows with Azure OpenAI\\\" custom step creates documentation for a SAS Studio flow.\\n\\nPrinciple:\\nThis custom step processes a selected SAS Studio flow (.flw file), sends its content to an Azure OpenAI endpoint, and generates documentation for the flow.\\nThe output is saved in a .txt file.\\n\\nThe following inputs are required:\\n1. Select the flow to be documented (.flw file): The full path to the SAS Studio flow file to be documented.\\n2. Folder where the .env file is stored: The folder containing the .env file needed for the connection to Azure OpenAI.\\n3. File where the LLM system message is stored (system_message.txt): A .txt file containing the system message for the Azure OpenAI model.\\n\\nThe following outputs are required:\\n1. Write the output to (.txt file): The .txt file where the SAS Studio flow documentation will be saved. The file contains Markdown-formatted text.\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectionPrereqs\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Pre-requisites\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"textPrereqs\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"1. Tested on SAS Viya LTS version 2025.03, 2024.09 and Stable version 2025.01.\\na. Ensure you have a working SAS Viya environment and Python installed and configured for the environment. This custom step is using a Python program.\\nb. Python packages required: `python-dotenv` and `requests`.\\nc. Display Hidden Files: To view hidden files in SAS Studio, such as `.env` from Options > Preferences > General > check Display hidden files.\\n\\n2. Azure OpenAI Resource: in your Azure subscription, create an Azure OpenAI resource and deploy a large language model (LLM). The custom step was tested with GPT-4o.\\n3. In a SAS Studio folder, create a configuration file named `.env` with the following content:\\n--- .env file --- \\nAZURE_OAI_ENDPOINT='https://my_endpoint.openai.azure.com/' # change my_endpoint\\nAZURE_OAI_KEY='my_api_key' # change my_api_key\\nAZURE_OAI_DEPLOYMENT='gpt-4o'\\n--- end of .env file ---\\n\\n3. In a SAS Studio folder, create a system message file named `system_message.txt`.\\nThe file shapes the documentation by acting as a guide for the large language model, defining the structure, level of detail, and focus areas (e.g., summaries, transformations, compliance) to ensure the output aligns with specific requirements. \\nCreate a `system_message.txt` file with the following suggested content, which you can adapt to match your requirements:\\n\\n--- system_message.txt sample file --- \\nYou are an AI assistant specialized in documenting SAS Studio flows (flw files) for Governance and Compliance purposes. Your task is to analyze a SAS Studio flow, including its visual representation (image) and the underlying code, to generate detailed and precise documentation. Follow these steps:\\n\\nSummary: Start with a high-level summary of the SAS Studio flow. Include:\\nThe purpose of the flow.\\nKey inputs (datasets or files used).\\nKey outputs (datasets or files generated).\\nA brief description of the transformations or processes applied.\\nStep-by-Step Explanation: Break down the flow into individual steps and explain:\\nThe purpose of each step.\\nInputs and outputs for the step.\\nAny transformations, joins, filters, or aggregations applied.\\nDetailed Column Mapping Table: Create a table titled \\\"Detailed Column Mapping for Each Step in the Flow\\\". For each step:\\nList all columns involved.\\nSpecify their names before and after the step.\\nHighlight any changes applied to the columns (e.g., renaming, transformations, additions, deletions).\\nUse the following table format:\\nStep\\tColumn Name\\tChanges (e.g., renamed, transformed, added, deleted)\\tDescription of Change (if applicable)\\nStep Name/ID\\tColumn_Name_1\\tRenamed to New_Column_Name_1\\tColumn renamed for consistency\\nStep Name/ID\\tColumn_Name_2\\tTransformed\\tApplied log transformation\\nStep Name/ID\\tColumn_Name_3\\tDeleted\\tColumn removed as it is no longer needed\\n\\nGovernance and Compliance Notes: Add a section at the end to highlight:\\nAny potential compliance concerns (e.g., PII data transformations, data lineage issues).\\nSuggestions for improving documentation or flow design for better governance.\\n--- end of system_message.txt sample file --- \",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectionHowItWorks\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"How It Works\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"textHowItWorks\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"How It Works\\n1. The .flw file content is read and prepared for processing.\\n2. A system message is read from the messages file.\\n3. The .env file is loaded to retrieve Azure OpenAI credentials and endpoint details.\\n4. The .flw file content and system message are sent to the Azure OpenAI API for processing.\\n5. The API response, which contains the generated documentation, is saved to the specified .txt output file.\\n\\nSteps:\\n1. Choose the inputs.\\n2. Specify the .txt file to save the documentation.\\n3. Run the step to generate the documentation.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectionDocumentation\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Documentation\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"textDocumentation\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"* Read the post and view the video in Automate SAS Studio Flows Documentation with Azure OpenAI in a Custom Step (https://communities.sas.com/t5/SAS-Communities-Library/Automate-SAS-Studio-Flows-Documentation-with-Azure-OpenAI-in-a/ta-p/959009).\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectionChangelog\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Changelog\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"textChangelog\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"* Version 1.1 (29 JUN 2025)\\n* Version 1.0 (12 FEB 2025)\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"input_file\": \"\",\n\t\t\"env_filefolderSelector\": \"\",\n\t\t\"msgfile_fileSelector\": \"\",\n\t\t\"output_step_fileSelector\": \"\"\n\t}\n}","flowMetadata":{"inputPorts":[],"outputPorts":[]}}