{"creationTimeStamp":"2025-03-24T20:49:08.451Z","modifiedTimeStamp":"2025-03-24T22:15:06.783Z","createdBy":"Crystal.Baker@sas.com","modifiedBy":"Crystal.Baker@sas.com","name":"LLM - Azure OpenAI In-context Learning.step","displayName":"LLM - Azure OpenAI In-context Learning.step","localDisplayName":"LLM - Azure OpenAI In-context Learning.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/bce627ce-4757-441f-aeb2-9b51c62176c9","uri":"/dataFlows/steps/bce627ce-4757-441f-aeb2-9b51c62176c9","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/bce627ce-4757-441f-aeb2-9b51c62176c9","uri":"/dataFlows/steps/bce627ce-4757-441f-aeb2-9b51c62176c9","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/bce627ce-4757-441f-aeb2-9b51c62176c9","uri":"/dataFlows/steps/bce627ce-4757-441f-aeb2-9b51c62176c9","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/bce627ce-4757-441f-aeb2-9b51c62176c9","uri":"/dataFlows/steps/bce627ce-4757-441f-aeb2-9b51c62176c9"},{"method":"POST","rel":"copy","href":"/dataFlows/steps/bce627ce-4757-441f-aeb2-9b51c62176c9/copy","uri":"/dataFlows/steps/bce627ce-4757-441f-aeb2-9b51c62176c9/copy","responseType":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/bce627ce-4757-441f-aeb2-9b51c62176c9","uri":"/dataFlows/steps/bce627ce-4757-441f-aeb2-9b51c62176c9","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/bce627ce-4757-441f-aeb2-9b51c62176c9","uri":"/dataFlows/steps/bce627ce-4757-441f-aeb2-9b51c62176c9","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[{"name":"inputData","displayName":"inputData","localDisplayName":"inputData","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table"}],"outputPorts":[{"name":"outputTable","displayName":"outputTable","localDisplayName":"outputTable","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table","supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"params\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Parameters\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section_input_params\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Parameters\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"inputData\",\n\t\t\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\t\t\"label\": \"Select input data:\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"textCol\",\n\t\t\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\t\t\"label\": \"Select text column:\",\n\t\t\t\t\t\t\t\"include\": null,\n\t\t\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\t\t\"min\": null,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"table\": \"inputData\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section_prompts\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Prompts\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"_systemPrompt\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textarea\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Provide system prompt:\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text_system_prompt\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"Use the system prompt to provide broad instructions to the LLM such as role, task description and response specification.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"userPrompt\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textarea\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Provide user prompt:\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text_user_prompt\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"Use the user prompt to provide specific instructions on the task to perform.  Use tags like {Question}, {Context} etc. to refer to the context provided.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"userExample\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textarea\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Provide illustrative example(s):\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text_user_example\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"Use the user example to provide 0, 1, or more illustrative examples of context and desired response from the LLM. Tag examples as Example: and Answer:.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section_output_specs\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Output specification\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"temperature\",\n\t\t\t\t\t\t\t\"type\": \"numstepper\",\n\t\t\t\t\t\t\t\"label\": \"Select temperature for output:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"integer\": false,\n\t\t\t\t\t\t\t\"min\": 0,\n\t\t\t\t\t\t\t\"max\": 1,\n\t\t\t\t\t\t\t\"stepsize\": 0.05\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text_temperature\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Use the temperature control to govern how the LLM generates its response based on next word prediction.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"topP\",\n\t\t\t\t\t\t\t\"type\": \"numstepper\",\n\t\t\t\t\t\t\t\"label\": \"Select top P for output:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"integer\": false,\n\t\t\t\t\t\t\t\"min\": 0,\n\t\t\t\t\t\t\t\"max\": 1,\n\t\t\t\t\t\t\t\"stepsize\": 0.05\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text_topP\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Similar to temperature, this controls how deterministic the model is. Lowering Top P will narrow the modelâ€™s token selection to likelier tokens. Increasing Top P will let the model choose from tokens with both high and low likelihood. Try adjusting temperature or Top P but not both.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"maxTokens\",\n\t\t\t\t\t\t\t\"type\": \"numstepper\",\n\t\t\t\t\t\t\t\"label\": \"Select the max number of tokens for output:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"integer\": true,\n\t\t\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\t\t\"stepsize\": 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text_maxTokens\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Use the max token control to limit the maximum number of tokens per the response. 1 token is approximately 4 characters of English text.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"frequencyPenalty\",\n\t\t\t\t\t\t\t\"type\": \"numstepper\",\n\t\t\t\t\t\t\t\"label\": \"Select the frequency penalty:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"integer\": false,\n\t\t\t\t\t\t\t\"min\": -2,\n\t\t\t\t\t\t\t\"max\": 2,\n\t\t\t\t\t\t\t\"stepsize\": 0.05\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text_frequencyPenalty\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"The frequency penalty reduces the likelihood of repeating words by applying a penalty to tokens based on how often they have already appeared in the text. A higher frequency penalty decreases repetition by discouraging the model from generating the same words multiple times.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"presencePenalty\",\n\t\t\t\t\t\t\t\"type\": \"numstepper\",\n\t\t\t\t\t\t\t\"label\": \"Select the presence penalty:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"integer\": false,\n\t\t\t\t\t\t\t\"min\": -2,\n\t\t\t\t\t\t\t\"max\": 2,\n\t\t\t\t\t\t\t\"stepsize\": 0.05\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text_presencePenalty\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"The presence penalty reduces the chance of repeating any word that has already appeared in the text, encouraging the model to introduce new topics. Unlike the frequency penalty, it applies a uniform penalty to all repeated tokens, regardless of how often they appear.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"outputTable\",\n\t\t\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\t\t\"label\": \"Provide output table:\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"config\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Configuration\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section_gen_model\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Text generation model\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"genModelDeployment\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide name of your Azure OpenAI generation model deployment:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section_azure_openai\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Azure OpenAI service:\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"azureKeyLocation\",\n\t\t\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\t\t\"label\": \"Provide path to your Azure OpenAI key:\",\n\t\t\t\t\t\t\t\"pathtype\": \"file\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text_key_details\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Ensure this key is located in a file saved in a secure folder.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"azureOpenAIEndpoint\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide URL for Azure OpenAI service endpoint:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"azureRegion\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide region for Azure OpenAI service\",\n\t\t\t\t\t\t\t\"placeholder\": \"Default value: eastus2\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"openAIVersion\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"OpenAI API Version\",\n\t\t\t\t\t\t\t\"placeholder\": \"2024-10-21\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"about\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_description\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"LLM - Azure OpenAI In-context Learning\\n==============================================\\n\\nThis custom step helps you interact with a Large Language Model (LLM) calling an [Azure OpenAI](https://microsoftlearning.github.io/mslearn-openai/Instructions/Exercises/01-get-started-azure-openai.html) service to process simple instructions on specified input data. It uses an approach called In-context learning which uses provided examples to perform a task.  If no example is provided, then the LLM simply uses the provided context.  This is useful for cases where a call to an LLM does not require prior search, filter or query of data sources (such as what Retrieval Augmented Generation provides) . Run inside a SAS session, this custom step takes either a SAS dataset or a CAS table as input and returns a SAS dataset (or CAS table) as output, with the response added as a new variable.\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section_prereqs\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Prerequisites\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text_prereqs\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"1. Python is available to the SAS Viya Compute session.  \\n2. Python packages to be installed:\\n     i.  openai: https://pypi.org/project/openai/\\n     ii.  pandas: https://pypi.org/project/pandas/\\n3. Viya 4 environment version 2025.01 or later \\n4. Valid Azure OpenAI service with large language models deployed.  Refer here for instructions: https://learn.microsoft.com/en-us/azure/ai-services/openai/quickstart?tabs=command-line%2Cpython-new&pivots=programming-language-studio\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_parameters\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Parameters\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_input\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Input parameters\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"input_parameters_text\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. Input table (input port, required): Attach either a SAS dataset or a SAS Cloud Analytics Services (CAS) table to the input port of this step.\\n2. Select text column (column selector, max 1): Select a column containing the context to be provided to the LLM\\n3. System prompt (text area): Provide a system prompt for use by the LLM. The system prompt helps clarify the role that the LLM plays and is also used for other instructions such as how to answer the question and the format in which to present the results.\\n4. User prompt (text area): Provide a user prompt which contains specific instructions to be fulfilled by the LLM.  In the user prompt, use fields like {Question} and {Context} to refer to the question or context provided.\\n5. Illustrative examples (text area):  Provide some illustrative examples (the 'shots') which are used as a basis for the LLM to answer the question. Provide this in the form of \\\"Question:\\\" and \\\"Answer:\\\" pairs\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_output_specs\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Output specifications\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"output_parameters_text\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. Temperature (numeric stepper): Use the temperature control to govern how the LLM generates its response based on next word prediction.\\n     i. Recommendation: Try adjusting Temperature or Top p, but not both.\\n2. Top P (numeric stepper): Use the top p control to govern randomness using nucleus sampling.  \\n    i. Recommendation: Try adjusting Temperature or Top p, but not both.\\n3. Max Tokens (numeric stepper): Use the max token control to limit the maximum number of tokens per the response. 1 token is approximately 4 characters of English text.\\n4. Frequency Penalty (numeric stepper): The frequency penalty reduces the likelihood of repeating words by applying a penalty to tokens based on how often they have already appeared in the text. A higher frequency penalty decreases repetition by discouraging the model from generating the same words multiple times.\\n5. Presence Penalty (numeric stepper): The presence penalty reduces the chance of repeating any word that has already appeared in the text, encouraging the model to introduce new topics. Unlike the frequency penalty, it applies a uniform penalty to all repeated tokens, regardless of how often they appear.\\n6. Output table (output port, required) : Attach a table referring to either a SAS dataset or CAS table which contains the original input columns along with the LLM's answer.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\t\t\"indent\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_config\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Configuration \",\n\t\t\t\t\t\t\t\"open\": 1,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"output_parameters_text_1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. Text generation model (text field): Provide the name of a Azure OpenAI model deployment.For convenience, you may choose to use the same name as the OpenAI LLM. Example, gpt-35-turbo to gpt-35-turbo.\\n2. Azure Key Location (file selector): Provide path to your Azure OpenAI key, located on the filesystem.  This would be a text file containing the value of the key.  Make sure this is saved in a secure location.\\n3. Azure OpenAI endpoint (text field): Provide the URL of the Azure OpenAI service.\\n4. Azure OpenAI region (text field): Provide the region where the service is set up (e.g. eastus2)\\n5. OpenAI version (default provided): Provide an OpenAI version number in case you want to override the default.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section_assumptions\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Assumptions\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text_assumptions\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Current assumptions for this initial versions (future versions may improve upon the same):\\n1. Users  choose either a SAS dataset or Cloud Analytics Services (CAS) table as their input \\n2. User has already configured Azure OpenAI to deploy both an embedding function and LLM service, or knows the deployment names.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_runtimecontrol\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Run-time Control\",\n\t\t\t\t\t\"open\": 0,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"runtimecontrol_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note: Run-time control is optional.  You may choose whether to execute the main code of this step or not, based on upstream conditions set by earlier SAS programs.  This includes nodes run prior to this custom step earlier in a SAS Studio Flow, or a previous program in the same session.\\n\\nRefer this blog (https://communities.sas.com/t5/SAS-Communities-Library/Switch-on-switch-off-run-time-control-of-SAS-Studio-Custom-Steps/ta-p/885526) for more details on the concept.\\nThe following macro variable,\\n```sas\\n_aicl_run_trigger\\n```\\nwill initialize with a value of 1 by default, indicating an 'enabled' status and allowing the custom step to run.\\nIf you wish to control execution of this custom step, include code in an upstream SAS program to set this variable to 0.  This 'disables' execution of the custom step.\\nTo 'disable' this step, run the following code upstream:\\n```sas\\n%global _aicl_run_trigger;\\n%let _aicl_run_trigger = 0;\\n```\\nTo 'enable' this step again, run the following (it's assumed that this has already been set as a global variable):\\n```sas\\n%let _aicl_run_trigger = 1;\\n```\\n\\nIMPORTANT: Be aware that disabling this step means that none of its main execution code will run, and any  downstream code which was dependent on this code may fail.  Change this setting only if it aligns with the objective of your SAS Studio program.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_documentation\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Documentation\",\n\t\t\t\t\t\"open\": 0,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"documentation_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"1.  Azure OpenAI service: https://learn.microsoft.com/en-us/azure/ai-services/openai/\\n2.  SAS Communities article on configuring Viya for Python integration: https://communities.sas.com/t5/SAS-Communities-Library/Configuring-SAS-Viya-for-Python-Integration/ta-p/847459\\n3. The SAS Viya Platform Deployment Guide (refer to SAS Configurator for Open Source within): https://go.documentation.sas.com/doc/en/itopscdc/default/itopssr/p1n66p7u2cm8fjn13yeggzbxcqqg.htm?fromDefault=#p19cpvrrjw3lurn135ih46tjm7oi \\n4. OpenAI API versions change periodically. Keep track of them here: https://learn.microsoft.com/en-us/azure/ai-services/openai/api-version-deprecation\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"version_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Version: 1.0  (24MAR2025)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"contact_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Created/contact: \\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com) \\n- Crystal Baker (crystal.baker@sas.com)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"inputData\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"textCol\": [],\n\t\t\"_systemPrompt\": \"\",\n\t\t\"userPrompt\": \"\",\n\t\t\"temperature\": null,\n\t\t\"topP\": null,\n\t\t\"maxTokens\": null,\n\t\t\"frequencyPenalty\": null,\n\t\t\"presencePenalty\": null,\n\t\t\"outputTable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"genModelDeployment\": \"\",\n\t\t\"azureKeyLocation\": \"\",\n\t\t\"azureOpenAIEndpoint\": \"https://<your_openai_service>.azure.com/\",\n\t\t\"azureRegion\": \"eastus2\",\n\t\t\"openAIVersion\": \"2024-10-21\"\n\t}\n}","templates":{"SAS":"/* SAS templated code goes here */\n\n/* -------------------------------------------------------------------------------------------* \n   LLM - Azure OpenAI In-context Learning\n\n   v 1.0.0 (24MAR2025)\n\n   This program interacts with an Azure OpenAI Large Language Model (LLM) service to process \n   instructions on specified input data and is designed to run within a SAS Studio Custom \n   Step. Please modify requisite macro variables (hint: use the debug section as a reference) \n   to run this using other interfaces, such as a SAS Program editor or the SAS Extension \n   for Visual Studio Code.\n\n   Sundaresh Sankaran (sundaresh.sankaran@sas.com|sundaresh.sankaran@gmail.com)\n   Crystal Baker (crystal.baker@sas.com)\n*-------------------------------------------------------------------------------------------- */\n\n/*-----------------------------------------------------------------------------------------*\n   DEBUG Section\n   Code under the debug section SHOULD ALWAYS remain commented unless you are tinkering with  \n   or testing the step!\n*------------------------------------------------------------------------------------------*/\n\n/* Provide test values for the parameters */\n\n/* cas ss;  \ncaslib _all_ assign;  */\n\n/* data PUBLIC.JOBCODES; */\n/*    set SAMPSIO.JOBCODES; */\n/* run; */\n/* data WORK.JOBCODES; */\n/*    set SAMPSIO.JOBCODES; */\n/* run; */\n\n/*\ndata _null_;\n   call symput('inputData',\"%sysget(inputData)\");\n   call symput('__systemPrompt', \"%sysget(_systemPrompt)\");\n   call symput('userPrompt', \"%sysget(userPrompt)\");\n   call symput('userExample', \"%sysget(userExample)\");\n   call symput('docId', \"%sysget(docId)\");\n   call symput('textCol', \"%sysget(textCol)\");\n   call symput('azureKeyLocation', \"%sysget(azureKeyLocation)\");\n   call symput('azureOpenAIEndpoint', \"%sysget(azureOpenAIEndpoint)\");\n   call symput('azureRegion', \"%sysget(azureRegion)\");\n   call symput('openAIVersion', \"%sysget(openAIVersion)\");\n   call symput('outputTable', \"%sysget(outputTable)\");\n   call symput('genModelDeployment', \"%sysget(genModelDeployment)\");\n   call symputx('temperature', %sysget(temperature));\nrun;\n\ndata _null_;\n   call symput('inputData_lib', scan(\"&inputData\", 1, \".\"));\n   call symput('inputData_name', scan(\"&inputData\", 2, \".\"));\nrun;\n\ndata _null_;\n   call symput('outputTable_lib', scan(\"&outputTable\", 1, \".\"));\n   call symput('outputTable_name', scan(\"&outputTable\", 2, \".\"));\nrun; \n\n*/\n\n/*-----------------------------------------------------------------------------------------*\n   END DEBUG Section\n*------------------------------------------------------------------------------------------*/\n\n\n/*-----------------------------------------------------------------------------------------*\n   Python Block Definition\n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   The following block of code has been created for the purpose of allowing proc python \n   to execute within a macro. Execution within a macro allows for other checks to be carried \n   out through SAS prior to handing off to the Python step.\n\n   In this example, a temporary file is created containing the requisite Python commands, which \n   are then executed through infile reference.\n\n   Note that Python code is pasted as-is and may be out of line with the SAS indentation followed.\n\n*------------------------------------------------------------------------------------------*/\n\nfilename aiclcode temp;\n\ndata _null_;\n\n   length line $32767;               * max SAS character size ;\n   infile datalines4 truncover pad;\n   input ;   \n   file aiclcode;\n   line = strip(_infile_);           * line without leading and trailing blanks ;\n   l1 = length(trimn(_infile_));     * length of line without trailing blanks ;\n   l2 = length(line);                * length of line without leading and trailing blanks ;\n   first_position=l1-l2+1;           * position where the line should start (alignment) ;\n   if (line eq ' ') then put @1;     * empty line ;\n   else put @first_position line;    * line without leading and trailing blanks correctly aligned ;\n\n   datalines4;\n############################################################################################################\n#   Obtain values from UI\n############################################################################################################\ninput_data_ref = SAS.symget('inputData')\noutput_table = SAS.symget('outputTable')\ninput_data_lib = SAS.symget('inputData_lib')\noutput_table_lib = SAS.symget('outputTable_lib')\ninput_data_name = SAS.symget('inputData_name')\noutput_table_name = SAS.symget('outputTable_name')\nsystem_prompt = SAS.symget('_systemPrompt')\ntext_col = SAS.symget('textCol')\ndoc_id = SAS.symget('docId')\nuser_prompt = SAS.symget('userPrompt')\nuser_example = SAS.symget('userExample')\n\n# Numeric Model parameters\ndef convert_value(value, target_type):\n    \"\"\"Convert non-empty strings to a specific type, else return None.\"\"\"\n    return target_type(value) if value != '' else None\n\n# Model parameters (all strings initially)\nparameters = {\n    \"temperature\": SAS.symget('temperature'),\n    \"max_tokens\": SAS.symget('maxTokens'),\n    \"top_p\": SAS.symget('topP'),\n    \"frequency_penalty\": SAS.symget('frequencyPenalty'),\n    \"presence_penalty\": SAS.symget('presencePenalty')\n}\n\n# Type mapping for conversion\ntype_mapping = {\n    \"temperature\": float,\n    \"max_tokens\": int,\n    \"top_p\": float,\n    \"frequency_penalty\": float,\n    \"presence_penalty\": float\n}\n\n# Apply conversions dynamically\nparameters = {k: convert_value(v, type_mapping[k]) for k, v in parameters.items()}\n\n# Unpack into variables\ntemperature, max_tokens, top_p, frequency_penalty, presence_penalty = parameters.values()\ndeployment_name = SAS.symget('genModelDeployment')\nazure_key = SAS.symget('azure_key')\nazure_openai_endpoint = SAS.symget('azureOpenAIEndpoint')\nazure_region = SAS.symget('azureRegion')\nazure_openai_version = SAS.symget('openAIVersion')\n_aicl_error_flag = SAS.symget('_aicl_error_flag')\n_aicl_error_desc = SAS.symget('_aicl_error_desc')\n_ip_sas_cas_flag = SAS.symget('_ip_sas_cas_flag')\n_op_sas_cas_flag = SAS.symget('_op_sas_cas_flag')\ninputData_caslib = SAS.symget('inputData_caslib')\noutputTable_caslib = SAS.symget('outputTable_caslib')\nsess_uuid = SAS.symget('_current_uuid_') \ncas_host = SAS.symget(\"_CASHOST_\")\ncas_port = SAS.symget(\"_CASPORT_\")\ncas_session_exists = int(SAS.symget(\"casSessionExists\"))\n\n# Check if input table is CAS or SAS table and create a dataframe accordingly\nif _ip_sas_cas_flag.strip().lower() == 'cas':\n   import swat \n   import os\n   \n   # Add certificate location to operating system list of trusted certs \n   os.environ['CAS_CLIENT_SSL_CA_LIST']=os.environ['SSLCALISTLOC']\n   \n   # There is an active cas session\n   if cas_session_exists == 1: \n      SAS.logMessage(f'Connection exists. Session UUID is {sess_uuid}')\n      conn = swat.CAS(hostname=cas_host, port=cas_port, password=os.environ['SAS_SERVICES_TOKEN'], session=sess_uuid)\n      new_cas_session = 0\n   else:\n      SAS.logMessage(\"New connection made to CAS through swat\")\n      conn = swat.CAS(hostname=cas_host, port=cas_port, password=os.environ['SAS_SERVICES_TOKEN'])\n      cas_session_exists = 1\n      new_cas_session = 1\n   if conn: \n         SAS.logMessage(\"Connection established.\")\n         input_data = conn.CASTable(name = input_data_name, caslib=input_data_lib).to_frame()\nelif _ip_sas_cas_flag.strip().lower() == 'sas':  \n   SAS.logMessage(\"Input table is SAS dataset\")\n   input_data = SAS.sd2df(dataset=input_data_ref)\nelse:\n   SAS.symput('_aicl_error_flag', 1)\n   SAS.symput('_aicl_error_desc', 'Unable to associate input table with either SAS or CAS. Check the input table provided.')\n\n\n############################################################################################################\n#   Functions\n############################################################################################################\n\nimport os\nfrom openai import AzureOpenAI\nimport pandas as pd\nimport copy\n\nclass SASAzureOpenAILLM():\n    def __init__(self,client = None, azure_openai_endpoint = None, deployment_name= None,azure_key = None,\n                 azure_openai_version = None, temperature = None, max_tokens = None, top_p = None, \n                 frequency_penalty = None, presence_penalty = None):\n        self.client = client\n        self.azure_openai_endpoint = azure_openai_endpoint\n        self.deployment_name = deployment_name\n        self.azure_key = azure_key\n        self.azure_openai_version = azure_openai_version\n        self.prompt = []\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.top_p = top_p\n        self.frequency_penalty = frequency_penalty\n        self.presence_penalty = presence_penalty\n\n    def set_client(self, azure_openai_endpoint = None, azure_key = None, azure_openai_version= None):\n       if azure_openai_endpoint is None:\n          try:\n           azure_openai_endpoint= os.environ[\"AZURE_OPENAI_ENDPOINT\"] \n          except KeyError:\n            raise ValueError(\"Endpoint must be provided or set in AZURE_OPENAI_ENDPOINT environment variable\")\n       if azure_key is None:\n            try:\n                 azure_key = os.environ[\"AZURE_OPENAI_AZURE_KEY\"]\n            except KeyError:\n                 raise ValueError(\"API key must be provided or set in AZURE_OPENAI_AZURE_KEY environment variable\")\n       if azure_openai_version is None:\n          try:\n             azure_openai_version = os.environ[\"AZURE_OPENAI_API_VERSION\"]\n          except KeyError:\n             raise ValueError(\"API version must be provided or set in AZURE_OPENAI_API_VERSION environment variable\")   \n          \n       self.client = AzureOpenAI(api_key = azure_key,  api_version = azure_openai_version, azure_endpoint = azure_openai_endpoint)\n\n    \n    def get_client(self):\n        if self.client is None:\n            raise ValueError(\"Client not set. Please set the client using set_client method\")\n        return self.client\n\n    def set_prompt(self, system_prompt = None, user_prompt = None, example = None):\n        if system_prompt == None: \n            system_prompt = \"You are a helpful assistant. Using the provided context, respond with the answer only.\"\n        if user_prompt == None:\n            user_prompt = \"Echo the context.\"\n        if example is None:\n             self.prompt = [\n             {\n                 \"role\": \"system\",\n                 \"content\": system_prompt\n             },\n             {\n                 \"role\": \"user\",\n                 \"content\": f\"{user_prompt}\\n\" \n             }\n             ]\n        else:\n             self.prompt = [\n             {\n                 \"role\": \"system\",\n                 \"content\": system_prompt\n             },\n             {\n                 \"role\": \"user\",\n                 \"content\": f\"{user_prompt}\\nExample(s): {example}\\n\"\n             }\n             ]\n    \n    def get_prompt(self):\n        return \"\".join((self.prompt[0][\"content\"], self.prompt[1][\"content\"]))\n    \n    def get_response(self, context = None, client = None, deployment_name = None, prompt = None,\n                 system_prompt = None, user_prompt = None, example = None,temperature=None,\n                 max_tokens=None, top_p=None, frequency_penalty=None, presence_penalty=None):  \n        # Generate new base prompt\n        self.set_prompt(system_prompt, user_prompt, example)\n        \n        # Assign llm parameters\n        client = client if client is not None else self.client\n        deployment_name = deployment_name if deployment_name is not None else self.deployment_name\n        prompt = prompt if prompt is not None else self.prompt\n        temperature = temperature if temperature is not None else self.temperature\n        max_tokens = max_tokens if max_tokens is not None else self.max_tokens\n        top_p = top_p if top_p is not None else self.top_p\n        frequency_penalty = frequency_penalty if frequency_penalty is not None else self.frequency_penalty\n        presence_penalty = presence_penalty if presence_penalty is not None else self.presence_penalty\n\n        # Append context if available\n        if context is None or len(context) == 0:\n            print(\"No context provided\")\n            return \"\"\n        else: \n            prompt[1][\"content\"] = prompt[1][\"content\"] + f\"Context: {context}\"\n            completion = client.chat.completions.create(\n                model = deployment_name,\n                messages = prompt,\n                temperature = temperature,\n                max_tokens = max_tokens,\n                top_p = top_p,\n                frequency_penalty = frequency_penalty,\n                presence_penalty = presence_penalty\n            )\n        return completion.choices[0].message.content\n        \ndef execute(azure_openai_endpoint=None, azure_key=None, azure_openai_version=None, system_prompt=None, user_prompt=None, example=None, input_data=None, deployment_name = None, text_col=None,\n            temperature = None, max_tokens = None, top_p = None, frequency_penalty = None, presence_penalty = None): \n   model = SASAzureOpenAILLM(temperature=temperature, max_tokens=max_tokens, top_p=top_p, frequency_penalty=frequency_penalty, presence_penalty=presence_penalty)\n   model.set_client(azure_openai_endpoint, azure_key, azure_openai_version)\n   input_data[\"response\"] = input_data[text_col].apply(model.get_response, deployment_name=deployment_name, system_prompt=system_prompt, user_prompt=user_prompt, example=example) \n   return input_data\n\noutput_df = execute(azure_openai_endpoint=azure_openai_endpoint,azure_key = azure_key, azure_openai_version=azure_openai_version, system_prompt=system_prompt, \n                 user_prompt = user_prompt, example=user_example,input_data=input_data, deployment_name = deployment_name, text_col = text_col,\n                 temperature=temperature, max_tokens=max_tokens, top_p=top_p, frequency_penalty=frequency_penalty, presence_penalty=presence_penalty)\n   \n\n# Check if output table is CAS\nif _op_sas_cas_flag.strip().lower() == 'cas':\n   import swat \n   import os\n   SAS.logMessage(\"Output table specified as CAS\")\n   \n   # Add certificate location to operating system list of trusted certs \n   os.environ['CAS_CLIENT_SSL_CA_LIST']=os.environ['SSLCALISTLOC']\n   \n   # There is an active cas session\n   if cas_session_exists == 1: \n      if sess_uuid:\n         SAS.logMessage(f'Connection exists. Session UUID is {sess_uuid}')\n         conn = swat.CAS(hostname=cas_host, port=cas_port, password=os.environ['SAS_SERVICES_TOKEN'], session=sess_uuid)\n      elif conn:\n         SAS.logMessage(f'Connection exists.')\n   else:\n      SAS.logMessage(\"New connection made to CAS through swat\")\n      conn = swat.CAS(hostname=cas_host, port=cas_port, password=os.environ['SAS_SERVICES_TOKEN'])\n      cas_session_exists = 1\n      new_cas_session = 1\n   if conn: \n         conn.upload_frame(output_df, casout = {'name':output_table_name, \n                                          'caslib':outputTable_caslib, \n                                          'replace':True})\n         if new_cas_session == 1:\n            SAS.logMessage(\"Persisting file prior to closing connection.\")\n            r = conn.table.tableExists(name=output_table_name,caslib=outputTable_caslib)\n            if r.exists==2:\n               conn.table.droptable(name=output_table_name,caslib=outputTable_caslib)\n               sdfVarSaved = conn.table.save(conn.CASTable(name=output_table_name,caslib=outputTable_caslib), name =output_table_name, caslib=outputTable_caslib, replace = True)\n            else:\n               sdfVarSaved = conn.table.save(conn.CASTable(name=output_table_name,caslib=outputTable_caslib), name =output_table_name, caslib=outputTable_caslib, replace = True)\n            SAS.logMessage(\"Terminating the connection.\")\n            conn.session.endsession()\nelif _op_sas_cas_flag.strip().lower() == 'sas':  \n   output_data = SAS.df2sd(output_df, output_table)\nelse:\n   SAS.symput('_aicl_error_flag', 1)\n   SAS.symput('_aicl_error_desc', 'Unable to associate output table with either SAS or CAS. Check the output table provided.')\n   \n;;;;\nrun;   \n\n/*-----------------------------------------------------------------------------------------*\n   MACROS\n*------------------------------------------------------------------------------------------*/\n/* -------------------------------------------------------------------------------------------* \n   Macro to initialize a run-time trigger global macro variable to run SAS Studio Custom Steps. \n   A value of 1 (the default) enables this custom step to run.  A value of 0 (provided by \n   upstream code) sets this to disabled.\n\n   Input:\n   1. triggerName: The name of the runtime trigger you wish to create. Ensure you provide a \n      unique value to this parameter since it will be declared as a global variable.\n\n   Output:\n   2. &triggerName : A global variable which takes the name provided to triggerName.\n*-------------------------------------------------------------------------------------------- */\n\n%macro _create_runtime_trigger(triggerName);\n\n   %global &triggerName.;\n\n   %if %sysevalf(%superq(&triggerName.)=, boolean)  %then %do;\n  \n      %put NOTE: Trigger macro variable &triggerName. does not exist. Creating it now.;\n      %let &triggerName.=1;\n\n   %end;\n\n%mend _create_runtime_trigger;\n\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to create an error flag for capture during code execution.\n\n   Input:\n      1. errorFlagName: The name of the error flag you wish to create. Ensure you provide a \n         unique value to this parameter since it will be declared as a global variable.\n      2. errorFlagDesc: A description to add to the error flag.\n\n    Output:\n      1. &errorFlagName : A global variable which takes the name provided to errorFlagName.\n      2. &errorFlagDesc : A global variable which takes the name provided to errorFlagDesc.\n*------------------------------------------------------------------------------------------ */\n\n%macro _create_error_flag(errorFlagName, errorFlagDesc);\n\n   %global &errorFlagName.;\n   %let  &errorFlagName.=0;\n   %global &errorFlagDesc.;\n\n%mend _create_error_flag;\n\n/*-----------------------------------------------------------------------------------------*\n   Macro to capture indicator and UUIDof any currently active CAS session.\n   UUID is not expensive and can be used in future to consider graceful reconnect.\n\n   Input:\n   1. errorFlagName: name of an error flag that gets populated in case the connection is \n                     not active. Provide this value in quotes when executing the macro.\n                     Define this as a global macro variable in order to use downstream.\n   2. errorFlagDesc: Name of a macro variable which can hold a descriptive message output\n                     from the check.\n                     \n   Output:\n   1. Informational note as required. We explicitly don't provide an error note since \n      there is an easy recourse(of being able to connect to CAS)\n   2. UUID of the session: macro variable which gets created if a session exists.\n   3. errorFlagName: populated\n   4. errorFlagDesc: populated\n*------------------------------------------------------------------------------------------*/\n\n%macro _env_cas_checkSession(errorFlagName, errorFlagDesc);\n    %global casSessionExists;\n    %let casSessionExists= 0;\n    %put NOTE: Checking for an active CAS session. ;\n    %if %sysfunc(symexist(_current_uuid_)) %then %do;\n       %symdel _current_uuid_;\n    %end;\n    %if %sysfunc(symexist(_SESSREF_)) %then %do;\n      %let casSessionExists= %sysfunc(sessfound(&_SESSREF_.));\n      %put NOTE: CAS Session indicator - &casSessionExists. ;\n      %if &casSessionExists.=1 %then %do;\n         %global _current_uuid_;\n         %let _current_uuid_=;   \n         proc cas;\n            session.sessionId result = sessresults;\n            call symputx(\"_current_uuid_\", sessresults[1]);\n         quit;\n         %put NOTE: A CAS session &_SESSREF_. is currently active with UUID &_current_uuid_. ;\n         data _null_;\n            call symputx(\"&errorFlagName.\", 0);\n            call symput(\"&errorFlagDesc.\", \"CAS session is active.\");\n         run;\n      %end;\n      %else %do;\n         %put NOTE: Unable to find a currently active CAS session. Reconnect or connect to a CAS session upstream. ;\n         data _null_;\n            call symputx(\"&errorFlagName.\", 0);\n            call symput(\"&errorFlagDesc.\", \"Unable to find a currently active CAS session. Reconnect or connect to a CAS session upstream.\");\n        run;\n      %end;\n   %end;\n   %else %do;\n      %put NOTE: No active CAS session ;\n      data _null_;\n        call symputx(\"&errorFlagName.\", 0);\n        call symput(\"&errorFlagDesc.\", \"No active CAS session. Connect to a CAS session upstream.\");\n      run;\n   %end;\n\n%mend _env_cas_checkSession;  \n\n/*-----------------------------------------------------------------------------------------*\n   Caslib for a Libname macro\n   \n   This macro creates a global macro variable called _usr_nameCaslib\n   that contains the caslib name (aka. caslib-reference-name) associated with the libname\n   and assumes that the libname is using the CAS engine.\n \n   As sysvalue has a length of 1024 chars, we use the trimmed option in proc sql\n   to remove leading and trailing blanks in the caslib name.\n   \n   From macro provided by Wilbram Hazejager (wilbram.hazejager@sas.com)\n\n   Inputs:\n   - _usr_LibrefUsingCasEngine : A library reference provided by the user which is based \n                                 on a CAS engine.\n   \n   Outputs:\n   - _usr_nameCaslib : Global macro variable containing the caslib name.\n*------------------------------------------------------------------------------------------*/\n \n%macro _usr_getNameCaslib(_usr_LibrefUsingCasEngine);\n \n   %global _usr_nameCaslib;\n   %let _usr_nameCaslib=;\n \n   proc sql noprint;\n      select sysvalue into :_usr_nameCaslib trimmed from dictionary.libnames\n      where libname = upcase(\"&_usr_LibrefUsingCasEngine.\") and upcase(sysname)=\"CASLIB\";\n   quit;\n\n   /*--------------------------------------------------------------------------------------*\n      Note that we output a NOTE instead of an ERROR for the below condition since the \n      execution context determines whether this is an error or just an informational note.\n   *---------------------------------------------------------------------------------------*/\n   %if \"&_usr_nameCaslib.\" = \"\" %then %put NOTE: The caslib name for the &_usr_LibrefUsingCasEngine. is blank.;\n \n%mend _usr_getNameCaslib;\n\n\n/*-----------------------------------------------------------------------------------------*\n   Macro to check if a given libref belongs to a SAS or CAS engine.\n\n   Input:\n   1. sasCasLibref: a libref to be checked. Do not quote.\n   2. tableEngine: a flag to hold the table Engine value.\n   3. errorFlagName: a flag to populate an error code with.\n   4. errorFlagDesc: a flag to describe the error if one occurs.\n   5. sessionExists: an indicator (1) whether an active CAS session exists.  If not(0),\n                     it will be created.\n                     \n   Output:\n   1. tableEngine: populated with SAS or CAS\n   2. errorFlagName: populated with 1 if an error and 0 if not\n   3. errorFlagDesc: populated in case of an error\n*------------------------------------------------------------------------------------------*/\n\n%macro _sas_or_cas(sasCasLibref, tableEngine, errorFlagName, errorFlagDesc, sessionExists);\n\n   %if &sessionExists. = 0 %then %do;\n      cas _temp_ss_ ;\n      caslib _ALL_ assign;\n   %end;\n\n    proc sql noprint;\n        select distinct Engine into:&&tableEngine. from dictionary.libnames where libname = upcase(\"&sasCasLibref.\");\n    quit;\n\n    %put \"&&&tableEngine.\";\n\n    %if %sysfunc(compress(\"&&&tableEngine.\")) = \"V9\" %THEN %DO;\n        data _null_;\n            call symput(\"&tableEngine.\",\"SAS\");\n            call symputx(\"&errorFlagName.\",0);\n            call symput(\"&errorFlagDesc.\",\"\");\n        run;\n    %end;\n    %else %if %sysfunc(compress(\"&&&tableEngine.\")) = \"CAS\" %THEN %DO;\n        data _null_;\n            call symputx(\"&errorFlagName.\",0);\n            call symput(\"&errorFlagDesc.\",\"\");\n        run;\n    %END;\n    %else %do;\n        data _null_;\n            call symputx(\"&errorFlagName.\",1);\n            call symput(\"&errorFlagDesc.\",\"Unable to associate libref with either SAS or CAS. Check the input libref provided.\");\n        run;\n    %end;\n\n   %if &sessionExists. = 0 %then %do;\n      cas _temp_ss_ terminate;\n   %end;\n    \n%mend _sas_or_cas;\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to identify whether a given folder location provided from a \n   SAS Studio Custom Step folder selector happens to be a SAS Content folder\n   or a folder on the filesystem (SAS Server).\n\n   Input:\n   1. pathReference: A path reference provided by the file or folder selector control in \n      a SAS Studio Custom step.\n\n   Output:\n   1. _path_identifier: Set inside macro, a global variable indicating the prefix of the \n      path provided.\n\n   Also available at: https://raw.githubusercontent.com/SundareshSankaran/sas_utility_programs/main/code/Identify%20SAS%20Content%20or%20Server/macro_identify_sas_content_server.sas\n\n*------------------------------------------------------------------------------------------ */\n\n%macro _identify_content_or_server(pathReference);\n   %global _path_identifier;\n   data _null_;\n      call symput(\"_path_identifier\", scan(\"&pathReference.\",1,\":\",\"MO\"));\n   run;\n   %put NOTE: _path_identifier is &_path_identifier. ;\n%mend _identify_content_or_server;\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to extract the path provided from a SAS Studio Custom Step file or folder selector.\n\n   Input:\n   1. pathReference: A path reference provided by the file or folder selector control in \n      a SAS Studio Custom step.\n\n   Output:\n   1. _sas_folder_path: Set inside macro, a global variable containing the path.\n\n   Also available at: https://raw.githubusercontent.com/SundareshSankaran/sas_utility_programs/main/code/Extract%20SAS%20Folder%20Path/macro_extract_sas_folder_path.sas\n\n*------------------------------------------------------------------------------------------ */\n\n%macro _extract_sas_folder_path(pathReference);\n\n   %global _sas_folder_path;\n\n   data _null_;\n      call symput(\"_sas_folder_path\", scan(\"&pathReference.\",2,\":\",\"MO\"));\n   run;\n\n%mend _extract_sas_folder_path;\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE MACRO \n\n   _aicl prefix stands for Azure In-context Learning\n*------------------------------------------------------------------------------------------*/\n%macro _aicl_execution_code;\n\n   %_create_error_flag(_aicl_error_flag, _aicl_error_desc);\n\n/*-----------------------------------------------------------------------------------------*\n    Check for a CAS session\n*------------------------------------------------------------------------------------------*/\n   %if &_aicl_error_flag. = 0 %then %do;\n      %_env_cas_checkSession(_aicl_error_flag, _aicl_error_desc);\n      %put NOTE: CAS session flag shows &casSessionExists. ;\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n    Check for Input table engine name.\n*------------------------------------------------------------------------------------------*/\n   %if &_aicl_error_flag. = 0 %then %do;\n      %let _ip_sas_cas_flag=;\n      %_sas_or_cas(&inputData_lib., _ip_sas_cas_flag, _aicl_error_flag, _aicl_error_desc, &casSessionExists.)\n      %put NOTE: Input Table Engine - &_ip_sas_cas_flag. ;\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n    If Input table is in CAS, obtain the caslib name.\n*------------------------------------------------------------------------------------------*/\n   %if &_aicl_error_flag. = 0 %then %do;\n      %if %sysfunc(compress(\"&_ip_sas_cas_flag.\")) = \"CAS\" %then %do;\n         %if &casSessionExists.=1 %then %do;\n            %_usr_getNameCaslib(&inputData_lib.);\n         %end;\n         %else %do;\n            cas _temp_ss_session_;\n            caslib _ALL_ assign;\n            %_usr_getNameCaslib(&inputData_lib.);\n            cas _temp_ss_session_ terminate;\n         %end;\n\n         %put NOTE: CASLIB name for &_ip_sas_cas_flag. - &_usr_nameCaslib. ;\n         %let inputData_caslib = &_usr_nameCaslib.;\n         %let _usr_nameCaslib =;\n      %end;\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n    Check for Output table engine name.\n*------------------------------------------------------------------------------------------*/\n   %if &_aicl_error_flag. = 0 %then %do;\n      %let _op_sas_cas_flag=;\n      %_sas_or_cas(&outputTable_lib., _op_sas_cas_flag, _aicl_error_flag, _aicl_error_desc, &casSessionExists.)\n      %put NOTE: Output Table Engine - &_op_sas_cas_flag. ;\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n    If Output table is in CAS, obtain the caslib name.\n*------------------------------------------------------------------------------------------*/\n   %if &_aicl_error_flag. = 0 %then %do;\n      %if %sysfunc(compress(\"&_op_sas_cas_flag.\")) = \"CAS\" %then %do;\n         %if &casSessionExists.=1 %then %do;\n            %_usr_getNameCaslib(&outputTable_lib.);\n         %end;\n         %else %do;\n            cas _temp_ss_session_;\n            caslib _ALL_ assign;\n            %_usr_getNameCaslib(&outputTable_lib.);\n            cas _temp_ss_session_ terminate;\n         %end;\n         \n         %put NOTE: CASLIB name for &_op_sas_cas_flag. - &_usr_nameCaslib. ;\n         %let outputTable_caslib = &_usr_nameCaslib.;\n         %let _usr_nameCaslib =;\n      %end;\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n   Check if path for Azure Key Location  happens to be a filesystem (SAS Server) path. \n*------------------------------------------------------------------------------------------*/\n   %if &_aicl_error_flag. = 0 %then %do;\n\n      %_identify_content_or_server(&azureKeyLocation.);\n\n      %if \"&_path_identifier.\"=\"sasserver\" %then %do;\n         %put NOTE: Folder location prefixed with &_path_identifier. is on the SAS Server.;\n      %end;\n\n      %else %do;\n\n         %let _aicl_error_flag=1;\n         %put ERROR: Please select a valid file on the SAS Server (filesystem) containing your Azure OpenAI key.  Key should be in a secure location within filesystem. ;\n         data _null_;\n            call symputx(\"_aicl_error_desc\", \"Please select a valid file on the SAS Server (filesystem) containing your Azure OpenAI key.  Key should be in a secure location within filesystem.\");\n         run;\n      \n      %end;\n\n   %end;\n\n   %if &_aicl_error_flag. = 0 %then %do;\n\n      %_extract_sas_folder_path(&azureKeyLocation.);\n\n      %if \"&_sas_folder_path.\" = \"\" %then %do;\n\n         %let _aicl_error_flag = 1;\n         %let _aicl_error_desc = The answer bank provided is empty, please select a valid path  ;\n         %put ERROR: &_aor_error_desc. ;\n\n      %end;\n\n   %end;\n\n   %if &_aicl_error_flag. = 0 %then %do;\n\n      %let _key_location = ;\n      %let _key_location = &_sas_folder_path.;\n      %let _sas_folder_path=;\n\n   %end;\n\n   %if &_aicl_error_flag. = 0 %then %do;\n\n      data _null_;\n         infile \"&_key_location.\" lrecl=1000;\n         input @;\n         call symput(\"azure_key\",_INFILE_);\n      run;\n \n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n    Proceed for Python call\n*------------------------------------------------------------------------------------------*/\n   %if &_aicl_error_flag. = 0 %then %do;\n\n      proc python infile=aiclcode;\n      run;\n\n   %end;\n\n\n\n%mend _aicl_execution_code;\n\n/*-----------------------------------------------------------------------------------------*\n   END MACROS\n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE\n*------------------------------------------------------------------------------------------*/\n   \n/*-----------------------------------------------------------------------------------------*\n   Create Runtime Trigger\n*------------------------------------------------------------------------------------------*/\n%_create_runtime_trigger(_aicl_run_trigger);\n\n/*-----------------------------------------------------------------------------------------*\n   Execute \n*------------------------------------------------------------------------------------------*/\n\n%if &_aicl_run_trigger. = 1 %then %do;\n\n   %_aicl_execution_code;\n\n%end;\n\n%if &_aicl_run_trigger. = 0 %then %do;\n\n   %put NOTE: This step has been disabled.  Nothing to do.;\n\n%end;\n\n\n%put NOTE: Final summary;\n%put NOTE: Status of error flag - &_aicl_error_flag. ;\n%put &_aicl_error_desc.;\n%put NOTE: Error desc - &_aicl_error_desc. ;\n\n/*-----------------------------------------------------------------------------------------*\n   END EXECUTION CODE\n*------------------------------------------------------------------------------------------*/\n/*-----------------------------------------------------------------------------------------*\n   Clean up existing macro variables and macro definitions.\n*------------------------------------------------------------------------------------------*/\n\n%if %symexist(_aicl_run_trigger) %then %do;\n   %symdel _aicl_run_trigger;\n%end;\n%if %symexist(_aicl_error_flag) %then %do;\n   %symdel _aicl_error_flag;\n%end;\n%if %symexist(_aicl_error_desc) %then %do;\n   %symdel _aicl_error_desc;\n%end;\n%if %symexist(casSessionExists) %then %do;\n   %symdel casSessionExists;\n%end;\n%if %symexist(_current_uuid_) %then %do;\n   %symdel _current_uuid_;\n%end;\n\n%sysmacdelete _create_runtime_trigger;\n%sysmacdelete _create_error_flag;\n%sysmacdelete _env_cas_checkSession;\n%sysmacdelete _usr_getNameCaslib;\n%sysmacdelete _identify_content_or_server;\n%sysmacdelete _extract_sas_folder_path;\n%sysmacdelete _sas_or_cas;\n%sysmacdelete _aicl_execution_code;\n\n/*-----------------------------------------------------------------------------------------*\n   DEBUG Section\n   Code under the debug section SHOULD ALWAYS remain commented unless you are tinkering with  \n   or testing the step!\n*------------------------------------------------------------------------------------------*/\n/*\ncas ss terminate;;\n*/;\n/*-----------------------------------------------------------------------------------------*\n   END DEBUG Section\n*------------------------------------------------------------------------------------------*/\n"}}
