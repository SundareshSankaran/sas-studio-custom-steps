{"name": "Python - Create a Virtual Environment.step", "creationTimeStamp": "2022-10-15T16:09:21.746Z", "modifiedTimeStamp": "2022-10-19T15:03:33.683Z", "createdBy": "Sundaresh.Sankaran@sas.com", "modifiedBy": "Sundaresh.Sankaran@sas.com", "displayName": "Python - Create a Virtual Environment.step", "localDisplayName": "Python - Create a Virtual Environment.step", "properties": {}, "links": [{"method": "GET", "rel": "self", "href": "/dataFlows/steps/2971fefb-bfb5-4bbe-9832-1235358c671f", "uri": "/dataFlows/steps/2971fefb-bfb5-4bbe-9832-1235358c671f", "type": "application/vnd.sas.data.flow.step"}, {"method": "GET", "rel": "alternate", "href": "/dataFlows/steps/2971fefb-bfb5-4bbe-9832-1235358c671f", "uri": "/dataFlows/steps/2971fefb-bfb5-4bbe-9832-1235358c671f", "type": "application/vnd.sas.data.flow.step.summary"}, {"method": "GET", "rel": "up", "href": "/dataFlows/steps", "uri": "/dataFlows/steps", "type": "application/vnd.sas.collection", "itemType": "application/vnd.sas.data.flow.step.summary"}, {"method": "PUT", "rel": "update", "href": "/dataFlows/steps/2971fefb-bfb5-4bbe-9832-1235358c671f", "uri": "/dataFlows/steps/2971fefb-bfb5-4bbe-9832-1235358c671f", "type": "application/vnd.sas.data.flow.step", "responseType": "application/vnd.sas.data.flow.step"}, {"method": "DELETE", "rel": "delete", "href": "/dataFlows/steps/2971fefb-bfb5-4bbe-9832-1235358c671f", "uri": "/dataFlows/steps/2971fefb-bfb5-4bbe-9832-1235358c671f"}, {"method": "GET", "rel": "transferExport", "href": "/dataFlows/steps/2971fefb-bfb5-4bbe-9832-1235358c671f", "uri": "/dataFlows/steps/2971fefb-bfb5-4bbe-9832-1235358c671f", "responseType": "application/vnd.sas.transfer.object"}, {"method": "PUT", "rel": "transferImportUpdate", "href": "/dataFlows/steps/2971fefb-bfb5-4bbe-9832-1235358c671f", "uri": "/dataFlows/steps/2971fefb-bfb5-4bbe-9832-1235358c671f", "type": "application/vnd.sas.transfer.object", "responseType": "application/vnd.sas.summary"}], "metadataVersion": 0.0, "version": 2, "type": "code", "flowMetadata": {"inputPorts": [], "outputPorts": []}, "ui": "{\"showPageContentOnly\": true, \"pages\": [{\"id\": \"param\", \"type\": \"page\", \"label\": \"Parameters\", \"children\": [{\"id\": \"venv\", \"type\": \"path\", \"label\": \"Provide a path for your virtual environment (note: provide a path on the filesystem if you want to persist your virtual environment):\", \"pathtype\": \"folder\", \"placeholder\": \"\", \"required\": false, \"visible\": \"\"}, {\"id\": \"install_system_site_packages\", \"type\": \"checkbox\", \"label\": \"Install system site packages (inherited from global environment)\", \"visible\": \"\"}, {\"id\": \"req\", \"type\": \"textfield\", \"label\": \"Enter the path to your requirements.txt file (or simply list your packages with a space between)\", \"placeholder\": \"\", \"required\": false, \"visible\": \"\"}, {\"id\": \"text1\", \"type\": \"text\", \"text\": \"Notes: \\n1. Creation of a virtual environment also activates the same.\\n2. The virtual environment will be created under a folder named venv.\", \"visible\": \"\"}]}, {\"id\": \"page2\", \"type\": \"page\", \"label\": \"About\", \"children\": [{\"id\": \"text2\", \"type\": \"text\", \"text\": \"Python - Create a Virtual Environment\\n===============================\\n\\nThe \\\"Python - Create a Virtual Environment\\\" custom step helps users create a virtual Python environment, install a given set of packages if needed, and work within the confines of the new Python environment for project or program-specific purposes.\\n\\nUsers may choose to persist the virtual environment folder for later reuse, by simply providing a full path to a persistent location folder.  Please provide a path on a shared file system, which you expect to access through another SAS session later on.  Most SAS Viya deployments may contain a /mnt/... folder location which serves this purpose.\\n\\nUsers also have an option to provide a requirements file consisting of packages which they would like pip-installed.  Either provide a path to a requirements.txt file which contains a list of python packages (and optionally, specific versions), or provide a list of packages as a string, separated by a space.\\n\\nFor more details, refer https://blogs.sas.com/content/subconsciousmusings/2022/05/16/python-a-la-carte/\", \"visible\": \"\"}, {\"id\": \"contact_details\", \"type\": \"section\", \"label\": \"Created / Contact\", \"open\": true, \"visible\": \"\", \"children\": [{\"id\": \"created_contact_text\", \"type\": \"text\", \"text\": \"Sundaresh Sankaran (sundaresh.sankaran@sas.com) and Ali Aiello (ali.aiello@sas.com) \", \"visible\": \"\"}]}, {\"id\": \"about_version\", \"type\": \"section\", \"label\": \"Version\", \"open\": true, \"visible\": \"\", \"children\": [{\"id\": \"version_text\", \"type\": \"text\", \"text\": \"Version : 2.1.0  (01SEP2025)\", \"visible\": \"\"}]}]}], \"syntaxversion\": \"1.3.0\", \"values\": {\"venv\": \"\", \"install_system_site_packages\": true, \"req\": \"\"}}", "templates": {"SAS": "/* SAS templated code goes here */\n\n/* -------------------------------------------------------------------------------------------* \n   Python - Create a Virtual Environment\n\n   v 2.1.0 (01SEP2025)\n\n   This program helps you create a Python virtual environment from within a SAS session.\n   It captures the current Python executable path and creates a virtual environment in the\n   specified location (or current working directory if not specified). It also allows you to\n   install packages either from a requirements.txt file or a space-separated list of packages.\n\n   Sundaresh Sankaran (sundaresh.sankaran@sas.com|sundaresh.sankaran@gmail.com)\n*-------------------------------------------------------------------------------------------- */\n\n/*-----------------------------------------------------------------------------------------*\n   Python Block Definition\n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   The following block of code has been created for the purpose of allowing proc python \n   to execute within a macro. Execution within a macro allows for other checks to be carried \n   out through SAS prior to handing off to the Python step.\n\n   In this example, a temporary file is created containing the requisite Python commands, which \n   are then executed through infile reference.\n\n   Note that Python code is pasted as-is and may be out of line with the SAS indentation followed.\n\n*------------------------------------------------------------------------------------------*/\n\nfilename cvirenv temp;\n\ndata _null_;\n\n   length line $32767;               * max SAS character size ;\n   infile datalines4 truncover pad;\n   input ;   \n   file cvirenv;\n   line = strip(_infile_);           * line without leading and trailing blanks ;\n   l1 = length(trimn(_infile_));     * length of line without trailing blanks ;\n   l2 = length(line);                * length of line without leading and trailing blanks ;\n   first_position=l1-l2+1;           * position where the line should start (alignment) ;\n   if (line eq ' ') then put @1;     * empty line ;\n   else put @first_position line;    * line without leading and trailing blanks correctly aligned ;\n\n   datalines4;\n\n# Import necessary libraries\nimport os\nimport subprocess\nfrom pathlib import Path\n\n# Capture current Python executable and save in a macro variable called  ORIGINAL_PYPATH for reference\npyt=os.environ[\"PROC_PYPATH\"]\nSAS.logMessage(f\"Current Python Path: {pyt}\")\n\n# Create a virtual environment in the directory specified.\nvenv_input=SAS.symget(\"venv_input\")\npath = Path(venv_input)\nif path.exists():\n    venv=os.path.join(venv_input,\"venv\")\nelse:\n    venv=os.path.join(os.getcwd(),\"venv\")\n\ninstall_system_site_packages=int(SAS.symget(\"install_system_site_packages\"))\n\nif install_system_site_packages==1:\n    command = f\"{pyt} -m venv {venv} --system-site-packages\"\nelse:\n    command = f\"{pyt} -m venv {venv}\"\n\n\nret = subprocess.run(command, capture_output=True, shell=True)\n\nif ret.__dict__[\"returncode\"]==0: \n    SAS.symput(\"TEMP_PYPATH\",str(os.path.join(venv,\"bin\",\"python3\")))\n    SAS.logMessage(\"Virtual environment created successfully.\")\nelse:\n    SAS.logMessage(\"Error creating virtual environment. Return code: \" + str(ret.__dict__[\"returncode\"]) + \". Error message: \" + str(ret.__dict__[\"stderr\"]),\"error\")\n    SAS.symput(\"_cvirenv_error_flag\",1)  # if error, retain original Python path ;\n    SAS.symput(\"_cvirenv_error_desc\",\"Error creating virtual environment. Return code: \" + str(ret.__dict__[\"returncode\"]) + \". Error message: \" + str(ret.__dict__[\"stderr\"]))\n\n\n;;;;\nrun;   \n\nfilename instpack temp;\n\ndata _null_;\n\n   length line $32767;               * max SAS character size ;\n   infile datalines4 truncover pad;\n   input ;   \n   file instpack;\n   line = strip(_infile_);           * line without leading and trailing blanks ;\n   l1 = length(trimn(_infile_));     * length of line without trailing blanks ;\n   l2 = length(line);                * length of line without leading and trailing blanks ;\n   first_position=l1-l2+1;           * position where the line should start (alignment) ;\n   if (line eq ' ') then put @1;     * empty line ;\n   else put @first_position line;    * line without leading and trailing blanks correctly aligned ;\n\n   datalines4;\n\n# Import necessary libraries\nimport os\nimport subprocess\nimport sys\n\nSAS.logMessage(f\"Current Python Path: {sys.executable}\")\npyt=SAS.symget(\"TEMP_PYPATH\")\nSAS.logMessage(\"Starting Requirements install\")\nreq=SAS.symget(\"req\")\n\n# Error prevention: check for empty requirements file or no package provided\nif not req or req.strip() == \"\":\n   SAS.logMessage(\"No requirements file or package list provided. Skipping pip install.\")\nelse:\n   if os.path.isfile(req):\n      # Check if file is empty\n      if os.path.getsize(req) == 0:\n         SAS.logMessage(f\"Requirements file '{req}' is empty. Skipping pip install.\")\n      else:\n         print(\"File provided\")\n         command = \"{pyt} -m pip install -r {req}\".format(pyt=pyt,req=req)\n         ret = subprocess.run(command, capture_output=True, shell=True)\n         if ret.__dict__[\"returncode\"]==0: \n            SAS.logMessage(\"Requirements installed successfully.\")\n         else:\n            SAS.logMessage(\"Error installing requirements. Return code: \" + str(ret.__dict__[\"returncode\"]) + \". Error message: \" + str(ret.__dict__[\"stderr\"]),\"error\")\n            SAS.symput(\"_cvirenv_error_flag\",1)  # if error, retain original Python path ;\n            SAS.symput(\"_cvirenv_error_desc\",\"Error installing requirements. Return code: \" + str(ret.__dict__[\"returncode\"]) + \". Error message: \" + str(ret.__dict__[\"stderr\"]))\n   else:\n      # Check if req is just whitespace\n      if req.strip() == \"\":\n         SAS.logMessage(\"No packages specified in the list. Skipping pip install.\")\n      else:\n         print(\"List provided\")\n         command = \"{pyt} -m pip install {req}\".format(pyt=pyt,req=req)\n         ret = subprocess.run(command, capture_output=True, shell=True)\n         if ret.__dict__[\"returncode\"]==0: \n            SAS.logMessage(\"Requirements installed successfully.\")\n         else:\n            SAS.logMessage(\"Error installing requirements. Return code: \" + str(ret.__dict__[\"returncode\"]) + \". Error message: \" + str(ret.__dict__[\"stderr\"]),\"error\")\n            SAS.symput(\"_cvirenv_error_flag\",1)  # if error, retain original Python path ;\n            SAS.symput(\"_cvirenv_error_desc\",\"Error installing requirements. Return code: \" + str(ret.__dict__[\"returncode\"]) + \". Error message: \" + str(ret.__dict__[\"stderr\"]))\n\n\n;;;;\nrun;   \n\n/*-----------------------------------------------------------------------------------------*\n   MACROS\n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   The following two macro variable is meant to be global as it refers to a changed state \n   of the global environment (SAS Studio session) it exists in.\n*------------------------------------------------------------------------------------------*/\n%global ORIGINAL_PYPATH;\n\n\n\n/* -------------------------------------------------------------------------------------------* \n   Macro to initialize a run-time trigger global macro variable to run SAS Studio Custom Steps. \n   A value of 1 (the default) enables this custom step to run.  A value of 0 (provided by \n   upstream code) sets this to disabled.\n\n   Input:\n   1. triggerName: The name of the runtime trigger you wish to create. Ensure you provide a \n      unique value to this parameter since it will be declared as a global variable.\n\n   Output:\n   2. &triggerName : A global variable which takes the name provided to triggerName.\n*-------------------------------------------------------------------------------------------- */\n\n%macro _create_runtime_trigger(triggerName);\n\n   %global &triggerName.;\n\n   %if %sysevalf(%superq(&triggerName.)=, boolean)  %then %do;\n  \n      %put NOTE: Trigger macro variable &triggerName. does not exist. Creating it now.;\n      %let &triggerName.=1;\n\n   %end;\n\n%mend _create_runtime_trigger;\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to create an error flag for capture during code execution.\n\n   Input:\n      1. errorFlagName: The name of the error flag you wish to create. Ensure you provide a \n         unique value to this parameter since it will be declared as a global variable.\n      2. errorFlagDesc: A description to add to the error flag.\n\n    Output:\n      1. &errorFlagName : A global variable which takes the name provided to errorFlagName.\n      2. &errorFlagDesc : A global variable which takes the name provided to errorFlagDesc.\n*------------------------------------------------------------------------------------------ */\n\n%macro _create_error_flag(errorFlagName, errorFlagDesc);\n\n   %global &errorFlagName.;\n   %let  &errorFlagName.=0;\n   %global &errorFlagDesc.;\n\n%mend _create_error_flag;\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to extract the path provided from a SAS Studio Custom Step file or folder selector.\n\n   Input:\n   1. pathReference: A path reference provided by the file or folder selector control in \n      a SAS Studio Custom step.\n\n   Output:\n   1. _sas_folder_path: Set inside macro, a global variable containing the path.\n\n   Also available at: https://raw.githubusercontent.com/SundareshSankaran/sas_utility_programs/main/code/Extract%20SAS%20Folder%20Path/macro_extract_sas_folder_path.sas\n\n*------------------------------------------------------------------------------------------ */\n\n%macro _extract_sas_folder_path(pathReference);\n\n   %global _sas_folder_path;\n\n   data _null_;\n      call symput(\"_sas_folder_path\", scan(\"&pathReference.\",2,\":\",\"MO\"));\n   run;\n\n%mend _extract_sas_folder_path;\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE MACRO \n\n   _cvirenv prefix stands for Create Virtual Environment\n*------------------------------------------------------------------------------------------*/\n%macro _cvirenv_execution_code;\n\n   %_create_error_flag(_cvirenv_error_flag, _cvirenv_error_desc);\n\n/*-----------------------------------------------------------------------------------------*\n    Extract existing Python path\n*------------------------------------------------------------------------------------------*/\n   %if &_cvirenv_error_flag. = 0 %then %do;\n      %let ORIGINAL_PYPATH=%sysget(PROC_PYPATH);\n   %end;  \n\n/*-----------------------------------------------------------------------------------------*\n    Extract value from folder selector\n*------------------------------------------------------------------------------------------*/\n   %if &_cvirenv_error_flag. = 0 %then %do;\n      %_extract_sas_folder_path(&venv.);\n      %let venv_input=&_sas_folder_path.;\n   %end;   \n\n/*-----------------------------------------------------------------------------------------*\n    Create a virtual environment in the specified location\n*------------------------------------------------------------------------------------------*/\n   %if &_cvirenv_error_flag. = 0 %then %do;\n      proc python infile=cvirenv;\n      run;\n   %end;   \n/*-----------------------------------------------------------------------------------------*\n    Change interpreter to new virtual environment\n*------------------------------------------------------------------------------------------*/\n   %if &_cvirenv_error_flag. = 0 %then %do;\n        proc python terminate;\n        quit;\n        \n        options set=PROC_PYPATH=\"&TEMP_PYPATH.\";\n        \n   %end;   \n   \n/*-----------------------------------------------------------------------------------------*\n    Install Packages\n*------------------------------------------------------------------------------------------*/\n   %if &_cvirenv_error_flag. = 0 %then %do;\n      proc python infile=instpack;\n      run;\n   %end;   \n\n%mend _cvirenv_execution_code;\n\n/*-----------------------------------------------------------------------------------------*\n   END MACROS\n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE\n*------------------------------------------------------------------------------------------*/\n   \n/*-----------------------------------------------------------------------------------------*\n   Create Runtime Trigger\n*------------------------------------------------------------------------------------------*/\n%_create_runtime_trigger(_cvirenv_run_trigger);\n\n/*-----------------------------------------------------------------------------------------*\n   Execute \n*------------------------------------------------------------------------------------------*/\n\n%if &_cvirenv_run_trigger. = 1 %then %do;\n\n   %_cvirenv_execution_code;\n\n%end;\n\n%if &_cvirenv_run_trigger. = 0 %then %do;\n\n   %put NOTE: This step has been disabled.  Nothing to do.;\n\n%end;\n\n\n%put NOTE: Final summary;\n%put NOTE: Status of error flag - &_cvirenv_error_flag. ;\n%put &_cvirenv_error_desc.;\n%put NOTE: Error desc - &_cvirenv_error_desc. ;\n\n/*-----------------------------------------------------------------------------------------*\n   END EXECUTION CODE\n*------------------------------------------------------------------------------------------*/\n/*-----------------------------------------------------------------------------------------*\n   Clean up existing macro variables and macro definitions.\n*------------------------------------------------------------------------------------------*/\n\n%if %symexist(_cvirenv_run_trigger) %then %do;\n   %symdel _cvirenv_run_trigger;\n%end;\n%if %symexist(_cvirenv_error_flag) %then %do;\n   %symdel _cvirenv_error_flag;\n%end;\n%if %symexist(_cvirenv_error_desc) %then %do;\n   %symdel _cvirenv_error_desc;\n%end;\n\n\n%sysmacdelete _create_runtime_trigger;\n%sysmacdelete _create_error_flag;\n%sysmacdelete _extract_sas_folder_path;\n%sysmacdelete _cvirenv_execution_code;\n\nfilename instpack clear;\nfilename cvirenv clear;\n\n\n\n"}}