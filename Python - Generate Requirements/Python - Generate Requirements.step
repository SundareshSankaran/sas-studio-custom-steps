{"name": "Python - Generate Requirements", "creationTimeStamp": null, "modifiedTimeStamp": null, "createdBy": null, "modifiedBy": null, "displayName": null, "localDisplayName": null, "properties": null, "links": null, "metadataVersion": null, "version": null, "type": "code", "flowMetadata": null, "ui": "{\"showPageContentOnly\": true, \"pages\": [{\"id\": \"param\", \"type\": \"page\", \"label\": \"Parameters\", \"children\": [{\"id\": \"req_task\", \"type\": \"radiogroup\", \"label\": \"What do you want to generate?\", \"items\": [{\"value\": \"freeze\", \"label\": \"Freeze all packages in a Python environment (pip freeze)\"}, {\"value\": \"project\", \"label\": \"Generate requirements for a project folder (pipreqs)\"}], \"required\": true}, {\"id\": \"env_folder\", \"type\": \"path\", \"label\": \"Python environment folder (folder containing /bin/python3):\", \"pathtype\": \"folder\", \"placeholder\": \"\", \"required\": false, \"visible\": [\"$req_task\", \"=\", \"freeze\"], \"enabled\": [\"$req_task\", \"=\", \"freeze\"]}, {\"id\": \"project_folder\", \"type\": \"path\", \"label\": \"Project folder containing Python scripts:\", \"pathtype\": \"folder\", \"placeholder\": \"\", \"required\": false, \"visible\": [\"$req_task\", \"=\", \"project\"], \"enabled\": [\"$req_task\", \"=\", \"project\"]}, {\"id\": \"req_file\", \"type\": \"path\", \"label\": \"Output requirements.txt file location:\", \"pathtype\": \"file\", \"placeholder\": \"\", \"required\": true}, {\"id\": \"text1\", \"type\": \"text\", \"text\": \"Choose whether to freeze all packages in a Python environment (pip freeze) or generate requirements for a project folder (pipreqs).\", \"visible\": \"\"}]}, {\"id\": \"about\", \"type\": \"page\", \"label\": \"About\", \"children\": [{\"id\": \"about_text\", \"type\": \"text\", \"text\": \"Python - Generate Requirements\\n===============================\\n\\nThis custom step helps you generate a requirements.txt file for your Python project or environment. You can either freeze all packages in a given Python environment, or generate requirements based on the imports used in a folder of Python scripts.\\n\\nFor more details, refer to the documentation or contact the author.\", \"visible\": \"\"}, {\"id\": \"about_param\", \"type\": \"section\", \"label\": \"Parameters\", \"open\": true, \"visible\": \"\", \"children\": [{\"id\": \"about_param_text\", \"type\": \"text\", \"text\": \"1. What do you want to generate? (radio button group)\\n   - Freeze all packages in a Python environment\\n   - Generate requirements from a folder of Python scripts\\n\\n 2. Python environment folder (folder selector)\\n   - The folder containing `/bin/python3` (required if freezing environment)\\n\\n3. Project folder (folder selector)\\n   - The folder containing your Python scripts (required if generating from scripts)\\n\\n4. Requirements file path (file selector)\\n   - The output path for the generated `requirements.txt` file\", \"visible\": \"\"}]}, {\"id\": \"about_prereq\", \"type\": \"section\", \"label\": \"Prerequisites\", \"open\": true, \"visible\": \"\", \"children\": [{\"id\": \"about_prereq_text\", \"type\": \"text\", \"text\": \"- Install the pipreqs Python package: https://pypi.org/project/pipreqs/\", \"visible\": \"\"}]}, {\"id\": \"about_version\", \"type\": \"section\", \"label\": \"Version\", \"open\": true, \"visible\": \"\", \"children\": [{\"id\": \"version_text\", \"type\": \"text\", \"text\": \"Version : 1.1.0  (01SEP2025)\", \"visible\": \"\"}]}, {\"id\": \"contact_details\", \"type\": \"section\", \"label\": \"Created / Contact\", \"open\": true, \"visible\": \"\", \"children\": [{\"id\": \"created_contact_text\", \"type\": \"text\", \"text\": \"Sundaresh Sankaran (sundaresh.sankaran@sas.com)\", \"visible\": \"\"}]}]}], \"syntaxversion\": \"1.3.0\", \"values\": {\"req_task\": \"freeze\", \"env_folder\": \"\", \"project_folder\": \"\", \"req_file\": \"\"}}", "templates": {"SAS": "/* SAS templated code goes here */\n\n/* -------------------------------------------------------------------------------------------* \n   Python - Generate Requirements\n\n   v 1.1.0 (01SEP2025)\n\n   This program helps you generate a requirements.txt file for your Python project or environment.\n   You can either freeze all packages in a given Python environment, or generate requirements\n   based on the imports used in a folder of Python scripts.\n\n   Sundaresh Sankaran (sundaresh.sankaran@sas.com| sundaresh.sankaran@gmail.com)\n*-------------------------------------------------------------------------------------------- */\n\n/*-----------------------------------------------------------------------------------------*\n   Debug Section\n   Uncomment and modify the values as needed to test the custom step outside of SAS Studio.\n*------------------------------------------------------------------------------------------*/\n\n/* %let req_task = project; */\n\n/* %let env_folder = %str(sasserver:/opt/sas/viya/home/sas-pyconfig/base_py); */\n\n/* %let project_folder = %str(sasserver:/mnt/viya-share/data/sinsrn/); */\n\n/* %let req_file = %str(sasserver:/mnt/viya-share/data/sinsrn/requirements.txt); */\n\n/*-----------------------------------------------------------------------------------------*\n   Python Block Definitions\n*------------------------------------------------------------------------------------------*/\n/*-----------------------------------------------------------------------------------------*\n   The following block of code has been created for the purpose of allowing proc python \n   to execute within a macro. Execution within a macro allows for other checks to be carried \n   out through SAS prior to handing off to the Python step.\n\n   In this example, a temporary file is created containing the requisite Python commands, which \n   are then executed through infile reference.\n\n   Note that Python code is pasted as-is and may be out of line with the SAS indentation followed.\n\n*------------------------------------------------------------------------------------------*/;\n\nfilename pipfreez temp;\ndata _null_;\n   length line $32767;\n   infile datalines4 truncover pad;\n   input ;   \n   file pipfreez;\n   line = strip(_infile_);\n   l1 = length(trimn(_infile_));\n   l2 = length(line);\n   first_position=l1-l2+1;\n   if (line eq ' ') then put @1;\n   else put @first_position line;\n   datalines4;\n\nimport subprocess\nreq = SAS.symget(\"req_file\")\npyt = SAS.symget(\"python_exec\")\ncommand = f\"{pyt} -m pip freeze > {req}\"\nret = subprocess.run(command, shell=True, capture_output=True)\n\nif ret.__dict__['returncode'] == 0:\n    print(f\"Requirements file saved at {req}\")\nelse:\n    SAS.symput(\"_genreq_error_flag\", 1)\n    SAS.symput(\"_genreq_error_desc\", f\"ERROR: Failed to generate requirements file at {req}. {ret.__dict__['stderr'].decode()}\")\n    print(f\"Error occurred while generating requirements file: {ret.__dict__['stderr'].decode()}\")\n\n;;;;\nrun;\n\nfilename projreq temp;\ndata _null_;\n   length line $32767;\n   infile datalines4 truncover pad;\n   input ;   \n   file projreq;\n   line = strip(_infile_);\n   l1 = length(trimn(_infile_));\n   l2 = length(line);\n   first_position=l1-l2+1;\n   if (line eq ' ') then put @1;\n   else put @first_position line;\n   datalines4;\n\nimport os\nimport subprocess\n\npyt = os.environ['PROC_PYPATH']\nprojectarea = SAS.symget(\"project_folder\")\nresultloc = SAS.symget(\"req_file\")\n\ncommand = f\"{pyt} -m pipreqs.pipreqs --save {resultloc} --force {projectarea}\"\n\nret = subprocess.run(command, shell=True, capture_output=True)\n\nif ret.__dict__['returncode'] == 0:\n    print(f\"Requirements file saved at {resultloc}\")\nelse:\n    SAS.symput(\"_genreq_error_flag\", 1)\n    SAS.symput(\"_genreq_error_desc\", f\"ERROR: Failed to generate requirements file at {resultloc}. {ret.__dict__['stderr'].decode()}\")  \n    print(f\"Error occurred while generating requirements file: {ret.__dict__['stderr'].decode()}\")\n\n;;;;\nrun;\n\n/*-----------------------------------------------------------------------------------------*\n   MACROS\n*------------------------------------------------------------------------------------------*/\n\n/* -------------------------------------------------------------------------------------------* \n   Macro to initialize a run-time trigger global macro variable to run SAS Studio Custom Steps. \n   A value of 1 (the default) enables this custom step to run.  A value of 0 (provided by \n   upstream code) sets this to disabled.\n\n   Input:\n   1. triggerName: The name of the runtime trigger you wish to create. Ensure you provide a \n      unique value to this parameter since it will be declared as a global variable.\n\n   Output:\n   2. &triggerName : A global variable which takes the name provided to triggerName.\n*-------------------------------------------------------------------------------------------- */\n\n%macro _create_runtime_trigger(triggerName);\n\n   %global &triggerName.;\n\n   %if %sysevalf(%superq(&triggerName.)=, boolean)  %then %do;\n  \n      %put NOTE: Trigger macro variable &triggerName. does not exist. Creating it now.;\n      %let &triggerName.=1;\n\n   %end;\n\n%mend _create_runtime_trigger;\n\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to create an error flag for capture during code execution.\n\n   Input:\n      1. errorFlagName: The name of the error flag you wish to create. Ensure you provide a \n         unique value to this parameter since it will be declared as a global variable.\n      2. errorFlagDesc: A description to add to the error flag.\n\n    Output:\n      1. &errorFlagName : A global variable which takes the name provided to errorFlagName.\n      2. &errorFlagDesc : A global variable which takes the name provided to errorFlagDesc.\n*------------------------------------------------------------------------------------------ */\n\n%macro _create_error_flag(errorFlagName, errorFlagDesc);\n   %global &errorFlagName.;\n   %let  &errorFlagName.=0;\n   %global &errorFlagDesc.;\n%mend _create_error_flag;\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to extract the path provided from a SAS Studio Custom Step file or folder selector.\n\n   Input:\n   1. pathReference: A path reference provided by the file or folder selector control in \n      a SAS Studio Custom step.\n\n   Output:\n   1. _sas_folder_path: Set inside macro, a global variable containing the path.\n\n   Also available at: https://raw.githubusercontent.com/SundareshSankaran/sas_utility_programs/main/code/Extract%20SAS%20Folder%20Path/macro_extract_sas_folder_path.sas\n\n*------------------------------------------------------------------------------------------ */\n%macro _extract_sas_folder_path(pathReference);\n   %global _sas_folder_path;\n   data _null_;\n      call symput(\"_sas_folder_path\", scan(\"&pathReference.\",2,\":\",\"MO\"));\n   run;\n%mend _extract_sas_folder_path;\n\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE MACRO\n*------------------------------------------------------------------------------------------*/\n%macro _genreq_execution_code;\n\n/*-----------------------------------------------------------------------------------------*\n   Create an error flag\n*------------------------------------------------------------------------------------------*/\n   %_create_error_flag(_genreq_error_flag, _genreq_error_desc);\n\n/*-----------------------------------------------------------------------------------------*\n    Extract value from file selector for requirements\n*------------------------------------------------------------------------------------------*/\n   %if &_genreq_error_flag. = 0 %then %do;\n/*-----------------------------------------------------------------------------------------*\n    Provide error if req file is empty\n*------------------------------------------------------------------------------------------*/\n        %if \"&req_file\" = \"\" %then %do;\n          %let _genreq_error_flag=1;\n          %let _genreq_error_desc=ERROR: Please specify requirements file.;\n        %end;\n        %else %do;\n           %_extract_sas_folder_path(&req_file.);\n           %let req_file=&_sas_folder_path.;\n        %end;\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n    For \"freeze\" task, extract value from folder selector for env folder\n*------------------------------------------------------------------------------------------*/\n\n   %if &_genreq_error_flag. = 0 %then %do;\n        %if \"%upcase(&req_task.)\" = \"FREEZE\" %then %do;\n/*-----------------------------------------------------------------------------------------*\n    Provide error if env folder is empty\n*------------------------------------------------------------------------------------------*/\n            %if \"&env_folder.\" = \"\" %then %do;\n                %let _genreq_error_flag=1;\n                %let _genreq_error_desc=ERROR: Please specify env_folder.;\n            %end;\n            %else %do;\n                %_extract_sas_folder_path(&env_folder.);\n                %let env_folder=&_sas_folder_path.;\n                %put NOTE: Environment folder resolved to &env_folder.;\n\n/*-----------------------------------------------------------------------------------------*\n    Run Python code for \"freeze\" task\n*------------------------------------------------------------------------------------------*/\n                %if &_genreq_error_flag. = 0 %then %do;\n                        %let python_exec = &env_folder./bin/python3;\n                        proc python infile=pipfreez;\n                        run;\n                        %if &_genreq_error_flag. = 0 %then %do;\n                            %let _genreq_error_desc=NOTE: Requirements frozen from environment &env_folder. available in folder &req_file. ;\n                        %end;\n                %end;\n            %end;\n        %end;\n        %else %if \"%upcase(&req_task.)\" = \"PROJECT\" %then %do;\n            %if \"&project_folder\" = \"\" %then %do;\n                %let _genreq_error_flag=1;\n                %let _genreq_error_desc=ERROR: Please specify project folder.;\n            %end;\n            %else %do;\n/*-----------------------------------------------------------------------------------------*\n    For \"project\" task, extract value from folder selector for project folder\n*------------------------------------------------------------------------------------------*/\n\n                %_extract_sas_folder_path(&project_folder.);\n                %let project_folder=&_sas_folder_path.;\n/*-----------------------------------------------------------------------------------------*\n    Run Python code for \"project\" task\n*------------------------------------------------------------------------------------------*/\n                %if &_genreq_error_flag. = 0 %then %do;\n                    proc python infile=projreq;\n                    run;\n                    %if &_genreq_error_flag. = 0 %then %do;\n                        %let _genreq_error_desc=NOTE: Requirements generated from project folder &project_folder. available in folder &req_file.;\n                    %end;\n                %end;\n            %end;\n        %end;\n   %end;\n%mend _genreq_execution_code;\n\n/*-----------------------------------------------------------------------------------------*\n   END MACROS\n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE\n*------------------------------------------------------------------------------------------*/\n/*-----------------------------------------------------------------------------------------*\n   Create Runtime Trigger\n*------------------------------------------------------------------------------------------*/\n%_create_runtime_trigger(_genreq_run_trigger);\n\n/*-----------------------------------------------------------------------------------------*\n   Execute \n*------------------------------------------------------------------------------------------*/\n\n%if &_genreq_run_trigger. = 1 %then %do;\n    %put NOTE: Execution trigger is set to 1. Proceeding with execution of Python - Generate Requirements custom step.;\n    %_genreq_execution_code;\n%end;\n\n%if &_genreq_run_trigger. = 0 %then %do;\n\n   %put NOTE: This step has been disabled.  Nothing to do.;\n\n%end;\n\n%put NOTE: Final summary;\n%put NOTE: Status of error flag - &_genreq_error_flag.;\n%put &_genreq_error_desc.;\n%put NOTE: Error desc - &_genreq_error_desc.;\n\n/*-----------------------------------------------------------------------------------------*\n   Clean up existing macro variables and macro definitions.\n*------------------------------------------------------------------------------------------*/\n\n%if %symexist(_genreq_error_flag) %then %do;\n   %symdel _genreq_error_flag;\n%end;\n%if %symexist(_genreq_error_desc) %then %do;\n   %symdel _genreq_error_desc;\n%end;\n\n%sysmacdelete _create_error_flag;\n%sysmacdelete _extract_sas_folder_path;\n%sysmacdelete _genreq_execution_code;\n\nfilename pipfreez clear;\nfilename projreq clear;\n"}}