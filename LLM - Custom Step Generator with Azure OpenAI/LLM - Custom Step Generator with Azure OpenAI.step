{"type":"code","name":"LLM - Custom Step Generator with Azure OpenAI.step","displayName":"LLM - Custom Step Generator with Azure OpenAI.step","description":"","templates":{"SAS":"/* SAS templated code goes here */\n/* Run the Python code within PROC PYTHON */\nproc python;\n   submit;\n\n# Import required libraries\nimport os\nfrom dotenv import load_dotenv\nimport requests\n\n# Get variables from SAS\nstep_description = SAS.symget('step_description')\nenv_file_folder = SAS.symget('envfile_folderSelector')\noutput_file = SAS.symget('output_step_fileSelector')\nmessages = SAS.symget('msgfile_fileSelector')\n\n# Remove prefixes like 'sasserver:' from the output file path\nenv_file_folder = env_file_folder.replace('sasserver:', '')\nmessages = messages.replace('sasserver:', '')\noutput_file = output_file.replace('sasserver:', '')\n\n# Change to the directory where the .env file is stored\n# Replace this with the correct path if needed\nos.chdir(env_file_folder)\n\n# Load Azure OpenAI credentials from the .env file\nload_dotenv()\nazure_oai_endpoint = os.getenv(\"AZURE_OAI_ENDPOINT\")\nazure_oai_key = os.getenv(\"AZURE_OAI_KEY\")\nazure_oai_deployment = os.getenv(\"AZURE_OAI_DEPLOYMENT\")\nazure_oai_model = azure_oai_deployment\napi_version = '2025-01-01-preview'\n\n# Read LLM system message\nwith open(messages, 'r', encoding=\"utf8\") as file:\n    system_message = file.read()\n\n# Define the payload for the OpenAI API\npayload = {\n    \"messages\": [\n        {\"role\": \"system\", \"content\": system_message},\n        {\"role\": \"user\", \"content\": step_description}\n    ],\n    \"temperature\": 0.5,\n    \"top_p\": 0.9,\n    \"max_tokens\": 3500\n}\n\n# Set the API endpoint\nENDPOINT = f\"{azure_oai_endpoint}openai/deployments/{azure_oai_model}/chat/completions?api-version={api_version}\"\n\n# Define headers for the request\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"api-key\": azure_oai_key\n}\n\n# Send the request to Azure OpenAI\ntry:\n    response = requests.post(ENDPOINT, headers=headers, json=payload)\n    response.raise_for_status()\n    response_data = response.json()\n\n    # Extract the generated step file content\n    step_file_content = response_data['choices'][0]['message']['content']\n\n    # Write the content to the output file\n    with open(output_file, 'w', encoding='utf-8') as f:\n        f.write(step_file_content)\n\n    print(f\"Custom step file successfully written to: {output_file}\")\n\nexcept requests.RequestException as e:\n    print(f\"Error communicating with Azure OpenAI: {e}\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n    SAS.submit(f'data _null_; put \"{error_message}\"; run;')\n\nendsubmit;\nrun;"},"properties":{},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"pageOptions\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Options\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"step_description\",\n\t\t\t\t\t\"type\": \"textarea\",\n\t\t\t\t\t\"label\": \"Describe the custom step you want to generate:\",\n\t\t\t\t\t\"placeholder\": \"Enter a detailed description of the custom step, including inputs, outputs, logic, and any specific requirements.\",\n\t\t\t\t\t\"required\": true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"envfile_folderSelector\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Folder where the .env file is stored:\",\n\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\"placeholder\": \"/azuredm/code\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"msgfile_fileSelector\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Specify the LLM system message file:\",\n\t\t\t\t\t\"pathtype\": \"file\",\n\t\t\t\t\t\"placeholder\": \"cs2_system_message.txt\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"output_step_fileSelector\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Specify the output .step file:\",\n\t\t\t\t\t\"pathtype\": \"file\",\n\t\t\t\t\t\"placeholder\": \"gen_.step\",\n\t\t\t\t\t\"required\": true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"pageAbout\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"LLM Custom Step Generator with Azure OpenAI\\n=================================\\nThis custom step uses Azure OpenAI to generate a complete SAS Studio custom step file (.step).\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"prerequisites\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Pre-requisites\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": []\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text3\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Prepare the Environment:\\n   - Ensure you have access to an Azure OpenAI resource and the necessary `.env` file for configuration.\\n   - Install required Python dependencies (`python-dotenv`, `requests`).\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"documentation\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Documentation\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": []\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"helpText\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Define the Prompt:\\n   - Write a detailed description of the custom step logic, including:\\n     - Inputs (e.g., data files, table names).\\n     - Outputs (e.g., result files, tables).\\n     - The specific functionality or logic to be implemented (e.g., anonymization, merging, summarization).\\n   - Example Prompt:\\n     \\\"Create a custom step that reads an input CSV file, anonymizes personal data, and outputs the result to another CSV file. Provide the Prompt UI, the Python program, and the full `.step` file.\\\"\\n\\nSpecify the folder where the .env file is stored.\\n\\nSpecify the LLM system message file.\\n\\nSpecify the output file path where the generated .step file will be saved.\\n\\nRun the step to generate the .step file.\\n\\nUse the generated .step file in your SAS Studio environment.\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"step_description\": \"\",\n\t\t\"msgfile_fileSelector\": \"\",\n\t\t\"output_step_fileSelector\": \"\"\n\t}\n}","flowMetadata":{"inputPorts":[],"outputPorts":[]}}