{"creationTimeStamp":"2025-02-14T10:23:30.285Z","modifiedTimeStamp":"2025-02-14T10:34:15.226Z","createdBy":"maloon","modifiedBy":"sasdemo","name":"GE - Generate Expectation Suite.step","displayName":"GE - Generate Expectation Suite.step","localDisplayName":"GE - Generate Expectation Suite.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/82a96084-02cd-4749-a82f-e7b319145e0a","uri":"/dataFlows/steps/82a96084-02cd-4749-a82f-e7b319145e0a","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/82a96084-02cd-4749-a82f-e7b319145e0a","uri":"/dataFlows/steps/82a96084-02cd-4749-a82f-e7b319145e0a","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/82a96084-02cd-4749-a82f-e7b319145e0a","uri":"/dataFlows/steps/82a96084-02cd-4749-a82f-e7b319145e0a","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/82a96084-02cd-4749-a82f-e7b319145e0a","uri":"/dataFlows/steps/82a96084-02cd-4749-a82f-e7b319145e0a"},{"method":"POST","rel":"copy","href":"/dataFlows/steps/82a96084-02cd-4749-a82f-e7b319145e0a/copy","uri":"/dataFlows/steps/82a96084-02cd-4749-a82f-e7b319145e0a/copy","responseType":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/82a96084-02cd-4749-a82f-e7b319145e0a","uri":"/dataFlows/steps/82a96084-02cd-4749-a82f-e7b319145e0a","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/82a96084-02cd-4749-a82f-e7b319145e0a","uri":"/dataFlows/steps/82a96084-02cd-4749-a82f-e7b319145e0a","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[{"name":"inTable","displayName":"inTable","localDisplayName":"inTable","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table"}],"outputPorts":[{"name":"out_expectations","displayName":"out_expectations","localDisplayName":"out_expectations","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table","supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page1\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Generate Expectations\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"inTable\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Select an input table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"location\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Select a folder for output files:\",\n\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"out_expectations\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Generated expectations:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"suiteName\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Input expectation suite name:\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"excludeCol\",\n\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\"label\": \"Pick columns to exclude:\",\n\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\"min\": null,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"table\": \"inTable\",\n\t\t\t\t\t\"include\": null\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"page2\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"GE - Generate Expectation Suite\\n======================\\n\\nWarning: This step uses experimental functionality in Great Expectations and only works with very specific versions of that software (v0.16.8 - v0.18).\\n\\nThis step generates data rules through the Great Expectations python library.\\n\\nRules can be customized by excluding columns from rule generation.\\n\\nThe output of this custom step will be a table summarizing the generated rules, a .json expectation suite file in the location indicated with the folder selector, and a great_expectations.yml in the same location. The output files can be used by the \\\"GE - Run Expectation Suite\\\" step to better understand how other data conforms to the rules set in this step.\\n\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section1\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Pre-requisites\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"* Built and tested on SAS Viya Stable Release 2023.04.\\n* Python's great_expectatons library version 0.16.8 - 0.18\\n* Python's pandas library version 1.5.3\\n* Python's json library\\n* Python's os library\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section2\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Documentation\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text3\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Components of this custom step are:\\n* Folder selector: Select the directory for output files (expectation suite .json and great_expectations.yml) to be placed within.\\n* Expectation suite name: Will be used to the name the expectation suite .json, so if the input is taxi_exp the output expectation suite will be saved as taxi_exp.json.\\n* Columns to exclude: Select columns that shuld be excluded when generating the expectation suite. It should be noted that excluded columns will not appear in tables generated by the \\\"Run Expectations\\\" custom step.\\n\\nThe results of this custom step are:\\n*Output files are saved in the directory specified in the folder selector.\\n*A table summarizing the generated expectations and their relevant columns.\\n\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section3\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Changelog\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text4\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"* Version 1.1.1 (14FEB2025)\\n   - Added warning: Is using experimental functionality and only works with older versions of Great Expectations\\n * Version 1.1 (19OCT2023)\\n   - Removed unsupported sd2df parameters\\n* Version 1.0 (12OCT2023)\\n   - Initial version\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"inTable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"location\": \"\",\n\t\t\"out_expectations\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"suiteName\": \"\",\n\t\t\"excludeCol\": []\n\t}\n}","templates":{"SAS":"%macro set_up();\n\n%global dataPath folder disk;\n%let dataPath = %sysfunc(getoption(work));\n\n%mend set_up;\n\n%set_up();\n\nproc python;\n   submit;\n\nimport great_expectations as gx\nimport pandas as pd\nfrom great_expectations.core.yaml_handler import YAMLHandler\nimport json\nfrom great_expectations.data_context.types.base import (\n        DataContextConfig,\n        InMemoryStoreBackendDefaults\n   )\nfrom great_expectations.data_context import EphemeralDataContext\nimport os\n\n# set up data context\nproject_config = DataContextConfig(\n   store_backend_defaults=InMemoryStoreBackendDefaults()\n)\ncontext = EphemeralDataContext(project_config=project_config)\n\n# get data\nif len(SAS.symget(\"excludeCol\")) > 0:\n   df = SAS.sd2df(SAS.symget(\"inTable\") + '(drop=' + SAS.symget(\"excludeCol\") + ')')\nelse:\n   df = SAS.sd2df(SAS.symget(\"inTable\"))\n\n# get path to working directory\npath_to_dir = SAS.symget(\"dataPath\")\nos.chdir(path_to_dir)\n\n# set up datasource\nyaml = YAMLHandler()\n\ndatasource_yaml = f\"\"\"\nname: my_datasource\nclass_name: Datasource\nmodule_name: great_expectations.datasource\nexecution_engine:\n  module_name: great_expectations.execution_engine\n  class_name: PandasExecutionEngine\ndata_connectors:\n    my_runtime_data_connector:\n        class_name: RuntimeDataConnector\n        batch_identifiers:\n            - id\n\"\"\"\n\n# add datasource to data context\ncontext.add_datasource(**yaml.load(datasource_yaml))\n\n# create runtime batch request (needed for pandas data source)\nfrom great_expectations.core.batch import RuntimeBatchRequest\nruntime_batch_request = RuntimeBatchRequest(\n   datasource_name=\"my_datasource\",\n   data_connector_name=\"my_runtime_data_connector\",\n   data_asset_name=\"insert_your_data_asset_name_here\",\n   runtime_parameters={\"batch_data\": df},\n   batch_identifiers={\n      \"id\": \"1\",\n   },\n)\n\n# check if batch request works\ncontext.get_batch_list(batch_request=runtime_batch_request)\n\n# get suite name from custom step\nsuite_name = SAS.symget(\"suiteName\")\n\n# create expectation suite\nexpectation_suite_name = suite_name\ncontext.add_or_update_expectation_suite(expectation_suite_name=expectation_suite_name)\nvalidator = context.get_validator(\n   batch_request=runtime_batch_request, \n   expectation_suite_name=expectation_suite_name\n)\n\n# run data assistant to create expectations\ndata_assistant_result = context.assistants.onboarding.run(\n   batch_request=runtime_batch_request\n)\n\n# get and save expectations\nexpectation_suite = data_assistant_result.get_expectation_suite(\n   expectation_suite_name=expectation_suite_name\n)\ncontext.add_or_update_expectation_suite(expectation_suite=expectation_suite)\n\ncontext = context.convert_to_file_context()\n\n# make output table\nformatted_data = {}\ndata = expectation_suite['expectations']\nfor entry in data:\n   expectation = entry.get('expectation_type')\n   if 'table' not in expectation:\n      kwargs = entry.get('kwargs')\n      column = kwargs.get('column')\n   else:\n      column = 'Table Expectation'\n   if expectation in formatted_data:\n      formatted_data[expectation].append(column)\n   else:\n      formatted_data[expectation] = []\n      formatted_data[expectation].append(column)\n\nfor entry in formatted_data:\n   formatted_data[entry] = ', '.join(map(str, formatted_data[entry]))\n\nout_df = pd.DataFrame(list(formatted_data.items()), columns=['expectation', 'columns'])\nSAS.df2sd(out_df, SAS.symget(\"out_expectations\"))\n\n# get location in usable format, is input as drive:/path/to/output and need to be /path/to/output\nlocation = SAS.symget(\"location\")\ndisk = location.split(\":\")[0]\nfolder = location[location.find(\":\")+1:]\nSAS.symput(\"folder\",folder)\nSAS.symput(\"disk\",disk)\n   endsubmit;\nrun;\n\n%macro clean_up();\n/* move .json and .yml files to user specified location */\n\n%if \"&disk\" eq \"sascontent\" %then %do;\n   filename desti filesrvc folderPath=\"&folder\" Filename=\"great_expectations.yml\";\n%end;\n%else %do;\n   filename desti \"&folder./great_expectations.yml\";\n%end;\nfilename source \"%sysfunc(getoption(work))/great_expectations/great_expectations.yml\";\n%let rc = %sysfunc(fcopy(source, desti));\nfilename desti clear;\nfilename source clear;\n%if \"&disk\" eq \"sascontent\" %then %do;\n   filename desti filesrvc folderPath=\"&folder\" Filename=\"&suiteName..json\";\n%end;\n%else %do;\n   filename desti \"&folder./&suiteName..json\";\n%end;\nfilename source \"%sysfunc(getoption(work))/great_expectations/expectations/&suiteName..json\";\n%let rc = %sysfunc(fcopy(source, desti));\nfilename desti clear;\nfilename source clear;\n\n%mend clean_up;\n\n%clean_up();\n\nproc python;\n   submit;\n# delete the generated great_expectations directory\nimport os, shutil\nfolder = SAS.symget(\"dataPath\")+'/great_expectations'\nfor filename in os.listdir(folder):\n   file_path = os.path.join(folder, filename)\n   try:\n      if os.path.isfile(file_path) or os.path.islink(file_path):\n         os.unlink(file_path)\n      elif os.path.isdir(file_path):\n         shutil.rmtree(file_path)\n   except Exception as e:\n      print('Failed to delete %s. Reason: %s' % (file_path, e))\nshutil.rmtree(folder)\n   endsubmit;\nrun;\n\n"}}